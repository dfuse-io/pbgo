// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfuse/vms/geth/evm/v1/executor.proto

package dfuse_vms_geth_evm_v1

import (
	context "context"
	fmt "fmt"
	deth "github.com/eoscanada/bstream/pb/dfuse/codecs/deth"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Enumerates accepted network. While this is not used in
// the service types like those above, this enum is used
// inside the code instead of coding the enum + string to name
// mappings in Go code directy.
type Network int32

const (
	Network_NETWORK_MAINNET Network = 0
	Network_NETWORK_ROPSTEN Network = 1
)

var Network_name = map[int32]string{
	0: "NETWORK_MAINNET",
	1: "NETWORK_ROPSTEN",
}

var Network_value = map[string]int32{
	"NETWORK_MAINNET": 0,
	"NETWORK_ROPSTEN": 1,
}

func (x Network) String() string {
	return proto.EnumName(Network_name, int32(x))
}

func (Network) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1aeb2f1c14ae0168, []int{0}
}

type ExecRequest struct {
	Transaction *deth.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	// Define the exact block reference against which this
	// execution should execute. If this is not set, the service
	// assumes the HEAD block should be used, whatever that means.
	//
	// This is usually the last block seen and recorded by the service
	// while connected to a block source.
	AtBlock              *deth.BlockRef `protobuf:"bytes,2,opt,name=atBlock,proto3" json:"atBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExecRequest) Reset()         { *m = ExecRequest{} }
func (m *ExecRequest) String() string { return proto.CompactTextString(m) }
func (*ExecRequest) ProtoMessage()    {}
func (*ExecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aeb2f1c14ae0168, []int{0}
}

func (m *ExecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecRequest.Unmarshal(m, b)
}
func (m *ExecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecRequest.Marshal(b, m, deterministic)
}
func (m *ExecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecRequest.Merge(m, src)
}
func (m *ExecRequest) XXX_Size() int {
	return xxx_messageInfo_ExecRequest.Size(m)
}
func (m *ExecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExecRequest proto.InternalMessageInfo

func (m *ExecRequest) GetTransaction() *deth.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *ExecRequest) GetAtBlock() *deth.BlockRef {
	if m != nil {
		return m.AtBlock
	}
	return nil
}

type ExecReplay struct {
	// The transaction to retrieve original data from.
	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// Define the exact block reference against which this
	// execution should execute. If this is not set, the service
	// assumes the HEAD block should be used, whatever that means.
	//
	// This is usually the last block seen and recorded by the service
	// while connected to a block source.
	AtBlock              *deth.BlockRef `protobuf:"bytes,2,opt,name=atBlock,proto3" json:"atBlock,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ExecReplay) Reset()         { *m = ExecReplay{} }
func (m *ExecReplay) String() string { return proto.CompactTextString(m) }
func (*ExecReplay) ProtoMessage()    {}
func (*ExecReplay) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aeb2f1c14ae0168, []int{1}
}

func (m *ExecReplay) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecReplay.Unmarshal(m, b)
}
func (m *ExecReplay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecReplay.Marshal(b, m, deterministic)
}
func (m *ExecReplay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecReplay.Merge(m, src)
}
func (m *ExecReplay) XXX_Size() int {
	return xxx_messageInfo_ExecReplay.Size(m)
}
func (m *ExecReplay) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecReplay.DiscardUnknown(m)
}

var xxx_messageInfo_ExecReplay proto.InternalMessageInfo

func (m *ExecReplay) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ExecReplay) GetAtBlock() *deth.BlockRef {
	if m != nil {
		return m.AtBlock
	}
	return nil
}

type ExecResponse struct {
	Trace                *deth.TransactionTrace `protobuf:"bytes,1,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ExecResponse) Reset()         { *m = ExecResponse{} }
func (m *ExecResponse) String() string { return proto.CompactTextString(m) }
func (*ExecResponse) ProtoMessage()    {}
func (*ExecResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1aeb2f1c14ae0168, []int{2}
}

func (m *ExecResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ExecResponse.Unmarshal(m, b)
}
func (m *ExecResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ExecResponse.Marshal(b, m, deterministic)
}
func (m *ExecResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExecResponse.Merge(m, src)
}
func (m *ExecResponse) XXX_Size() int {
	return xxx_messageInfo_ExecResponse.Size(m)
}
func (m *ExecResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExecResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExecResponse proto.InternalMessageInfo

func (m *ExecResponse) GetTrace() *deth.TransactionTrace {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterEnum("dfuse.vms.geth.evm.v1.Network", Network_name, Network_value)
	proto.RegisterType((*ExecRequest)(nil), "dfuse.vms.geth.evm.v1.ExecRequest")
	proto.RegisterType((*ExecReplay)(nil), "dfuse.vms.geth.evm.v1.ExecReplay")
	proto.RegisterType((*ExecResponse)(nil), "dfuse.vms.geth.evm.v1.ExecResponse")
}

func init() {
	proto.RegisterFile("dfuse/vms/geth/evm/v1/executor.proto", fileDescriptor_1aeb2f1c14ae0168)
}

var fileDescriptor_1aeb2f1c14ae0168 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0xc7, 0xad, 0xe8, 0x26, 0x6f, 0x03, 0x47, 0x44, 0x18, 0x53, 0x44, 0x37, 0x0f, 0xe2, 0x21,
	0x61, 0x1b, 0x1e, 0xbc, 0xa9, 0xd0, 0xc3, 0x10, 0xbb, 0x11, 0x0b, 0x3b, 0x4a, 0xcc, 0xde, 0x9c,
	0x6c, 0x5d, 0x66, 0x93, 0xc5, 0xf9, 0x05, 0xfc, 0x3c, 0x7e, 0x44, 0x69, 0x52, 0x71, 0x87, 0x51,
	0xc4, 0x4b, 0x79, 0x34, 0xbf, 0xdf, 0x3f, 0x79, 0x79, 0x81, 0xf3, 0xd1, 0x78, 0xa9, 0x91, 0xd9,
	0x44, 0xb3, 0x17, 0x34, 0x13, 0x86, 0x36, 0x61, 0xb6, 0xcd, 0x70, 0x85, 0x72, 0x69, 0x54, 0x4a,
	0x17, 0xa9, 0x32, 0x8a, 0x1c, 0x3a, 0x8a, 0xda, 0x44, 0xd3, 0x8c, 0xa2, 0x68, 0x13, 0x6a, 0xdb,
	0x8d, 0x63, 0x2f, 0x4b, 0x35, 0x42, 0xa9, 0xd9, 0x28, 0xf3, 0xb3, 0x8f, 0x97, 0x9a, 0x9f, 0x01,
	0x54, 0xc2, 0x15, 0x4a, 0x8e, 0x6f, 0x4b, 0xd4, 0x86, 0xdc, 0x40, 0xc5, 0xa4, 0x62, 0xae, 0x85,
	0x34, 0xaf, 0x6a, 0x5e, 0x0f, 0x4e, 0x83, 0x8b, 0x4a, 0xe7, 0x84, 0xfa, 0x68, 0x9f, 0x41, 0x9d,
	0x1e, 0xff, 0x52, 0x7c, 0x5d, 0x21, 0x57, 0x50, 0x16, 0xe6, 0x6e, 0xa6, 0xe4, 0xb4, 0xbe, 0xed,
	0xec, 0xa3, 0x0d, 0xb6, 0x5b, 0xe7, 0x38, 0xe6, 0x3f, 0x6c, 0x73, 0x08, 0xe0, 0xcf, 0xb1, 0x98,
	0x89, 0x0f, 0x42, 0x60, 0x67, 0x22, 0xf4, 0xc4, 0xed, 0x5f, 0xe5, 0xae, 0xfe, 0x6f, 0x70, 0x0f,
	0xaa, 0x3e, 0x58, 0x2f, 0xd4, 0x5c, 0x23, 0xb9, 0x86, 0x5d, 0x93, 0x0a, 0x89, 0x79, 0x6f, 0xad,
	0xe2, 0xde, 0xe2, 0x0c, 0xe5, 0xde, 0xb8, 0xec, 0x42, 0x39, 0x42, 0xf3, 0xae, 0xd2, 0x29, 0x39,
	0x80, 0xfd, 0x28, 0x8c, 0x87, 0x7d, 0x7e, 0xff, 0xf4, 0x70, 0xdb, 0x8b, 0xa2, 0x30, 0xae, 0x6d,
	0xad, 0xff, 0xe4, 0xfd, 0xc1, 0x63, 0x1c, 0x46, 0xb5, 0xa0, 0xf3, 0x15, 0xc0, 0x5e, 0x98, 0x4f,
	0x8a, 0x70, 0x28, 0xfb, 0x1a, 0x49, 0x93, 0x6e, 0x9c, 0x17, 0x5d, 0x9b, 0x46, 0xa3, 0x55, 0xc8,
	0xe4, 0x0d, 0x0d, 0xa0, 0x94, 0xdf, 0xda, 0x59, 0x21, 0x9e, 0x21, 0x7f, 0x4a, 0x7c, 0x2e, 0xb9,
	0xb7, 0xd1, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x00, 0xf6, 0xe1, 0xb4, 0x78, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutorClient is the client API for Executor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutorClient interface {
	Execute(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error)
	Replay(ctx context.Context, in *ExecReplay, opts ...grpc.CallOption) (*ExecResponse, error)
}

type executorClient struct {
	cc *grpc.ClientConn
}

func NewExecutorClient(cc *grpc.ClientConn) ExecutorClient {
	return &executorClient{cc}
}

func (c *executorClient) Execute(ctx context.Context, in *ExecRequest, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/dfuse.vms.geth.evm.v1.Executor/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executorClient) Replay(ctx context.Context, in *ExecReplay, opts ...grpc.CallOption) (*ExecResponse, error) {
	out := new(ExecResponse)
	err := c.cc.Invoke(ctx, "/dfuse.vms.geth.evm.v1.Executor/Replay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutorServer is the server API for Executor service.
type ExecutorServer interface {
	Execute(context.Context, *ExecRequest) (*ExecResponse, error)
	Replay(context.Context, *ExecReplay) (*ExecResponse, error)
}

// UnimplementedExecutorServer can be embedded to have forward compatible implementations.
type UnimplementedExecutorServer struct {
}

func (*UnimplementedExecutorServer) Execute(ctx context.Context, req *ExecRequest) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedExecutorServer) Replay(ctx context.Context, req *ExecReplay) (*ExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Replay not implemented")
}

func RegisterExecutorServer(s *grpc.Server, srv ExecutorServer) {
	s.RegisterService(&_Executor_serviceDesc, srv)
}

func _Executor_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.vms.geth.evm.v1.Executor/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Execute(ctx, req.(*ExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Executor_Replay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecReplay)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutorServer).Replay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.vms.geth.evm.v1.Executor/Replay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutorServer).Replay(ctx, req.(*ExecReplay))
	}
	return interceptor(ctx, in, info, handler)
}

var _Executor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.vms.geth.evm.v1.Executor",
	HandlerType: (*ExecutorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Executor_Execute_Handler,
		},
		{
			MethodName: "Replay",
			Handler:    _Executor_Replay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfuse/vms/geth/evm/v1/executor.proto",
}
