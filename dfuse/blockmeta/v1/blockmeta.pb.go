// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfuse/blockmeta/v1/blockmeta.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LIBRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LIBRequest) Reset()         { *m = LIBRequest{} }
func (m *LIBRequest) String() string { return proto.CompactTextString(m) }
func (*LIBRequest) ProtoMessage()    {}
func (*LIBRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{0}
}

func (m *LIBRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LIBRequest.Unmarshal(m, b)
}
func (m *LIBRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LIBRequest.Marshal(b, m, deterministic)
}
func (m *LIBRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LIBRequest.Merge(m, src)
}
func (m *LIBRequest) XXX_Size() int {
	return xxx_messageInfo_LIBRequest.Size(m)
}
func (m *LIBRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LIBRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LIBRequest proto.InternalMessageInfo

type NumToIDRequest struct {
	BlockNum             uint64   `protobuf:"varint,1,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NumToIDRequest) Reset()         { *m = NumToIDRequest{} }
func (m *NumToIDRequest) String() string { return proto.CompactTextString(m) }
func (*NumToIDRequest) ProtoMessage()    {}
func (*NumToIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{1}
}

func (m *NumToIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NumToIDRequest.Unmarshal(m, b)
}
func (m *NumToIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NumToIDRequest.Marshal(b, m, deterministic)
}
func (m *NumToIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumToIDRequest.Merge(m, src)
}
func (m *NumToIDRequest) XXX_Size() int {
	return xxx_messageInfo_NumToIDRequest.Size(m)
}
func (m *NumToIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumToIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumToIDRequest proto.InternalMessageInfo

func (m *NumToIDRequest) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

type TimeRequest struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *TimeRequest) Reset()         { *m = TimeRequest{} }
func (m *TimeRequest) String() string { return proto.CompactTextString(m) }
func (*TimeRequest) ProtoMessage()    {}
func (*TimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{2}
}

func (m *TimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TimeRequest.Unmarshal(m, b)
}
func (m *TimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TimeRequest.Marshal(b, m, deterministic)
}
func (m *TimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TimeRequest.Merge(m, src)
}
func (m *TimeRequest) XXX_Size() int {
	return xxx_messageInfo_TimeRequest.Size(m)
}
func (m *TimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TimeRequest proto.InternalMessageInfo

func (m *TimeRequest) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

type RelativeTimeRequest struct {
	Time                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty"`
	Inclusive            bool                 `protobuf:"varint,2,opt,name=inclusive,proto3" json:"inclusive,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RelativeTimeRequest) Reset()         { *m = RelativeTimeRequest{} }
func (m *RelativeTimeRequest) String() string { return proto.CompactTextString(m) }
func (*RelativeTimeRequest) ProtoMessage()    {}
func (*RelativeTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{3}
}

func (m *RelativeTimeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RelativeTimeRequest.Unmarshal(m, b)
}
func (m *RelativeTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RelativeTimeRequest.Marshal(b, m, deterministic)
}
func (m *RelativeTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RelativeTimeRequest.Merge(m, src)
}
func (m *RelativeTimeRequest) XXX_Size() int {
	return xxx_messageInfo_RelativeTimeRequest.Size(m)
}
func (m *RelativeTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RelativeTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RelativeTimeRequest proto.InternalMessageInfo

func (m *RelativeTimeRequest) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *RelativeTimeRequest) GetInclusive() bool {
	if m != nil {
		return m.Inclusive
	}
	return false
}

// Block ID that matched the request
type BlockResponse struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Time                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	Irreversible         bool                 `protobuf:"varint,3,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BlockResponse) Reset()         { *m = BlockResponse{} }
func (m *BlockResponse) String() string { return proto.CompactTextString(m) }
func (*BlockResponse) ProtoMessage()    {}
func (*BlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{4}
}

func (m *BlockResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockResponse.Unmarshal(m, b)
}
func (m *BlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockResponse.Marshal(b, m, deterministic)
}
func (m *BlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponse.Merge(m, src)
}
func (m *BlockResponse) XXX_Size() int {
	return xxx_messageInfo_BlockResponse.Size(m)
}
func (m *BlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponse proto.InternalMessageInfo

func (m *BlockResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlockResponse) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *BlockResponse) GetIrreversible() bool {
	if m != nil {
		return m.Irreversible
	}
	return false
}

type InLongestChainRequest struct {
	BlockID              string   `protobuf:"bytes,1,opt,name=blockID,proto3" json:"blockID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InLongestChainRequest) Reset()         { *m = InLongestChainRequest{} }
func (m *InLongestChainRequest) String() string { return proto.CompactTextString(m) }
func (*InLongestChainRequest) ProtoMessage()    {}
func (*InLongestChainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{5}
}

func (m *InLongestChainRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InLongestChainRequest.Unmarshal(m, b)
}
func (m *InLongestChainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InLongestChainRequest.Marshal(b, m, deterministic)
}
func (m *InLongestChainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InLongestChainRequest.Merge(m, src)
}
func (m *InLongestChainRequest) XXX_Size() int {
	return xxx_messageInfo_InLongestChainRequest.Size(m)
}
func (m *InLongestChainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InLongestChainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InLongestChainRequest proto.InternalMessageInfo

func (m *InLongestChainRequest) GetBlockID() string {
	if m != nil {
		return m.BlockID
	}
	return ""
}

type InLongestChainResponse struct {
	InLongestChain       bool     `protobuf:"varint,1,opt,name=inLongestChain,proto3" json:"inLongestChain,omitempty"`
	Irreversible         bool     `protobuf:"varint,2,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InLongestChainResponse) Reset()         { *m = InLongestChainResponse{} }
func (m *InLongestChainResponse) String() string { return proto.CompactTextString(m) }
func (*InLongestChainResponse) ProtoMessage()    {}
func (*InLongestChainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{6}
}

func (m *InLongestChainResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InLongestChainResponse.Unmarshal(m, b)
}
func (m *InLongestChainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InLongestChainResponse.Marshal(b, m, deterministic)
}
func (m *InLongestChainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InLongestChainResponse.Merge(m, src)
}
func (m *InLongestChainResponse) XXX_Size() int {
	return xxx_messageInfo_InLongestChainResponse.Size(m)
}
func (m *InLongestChainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InLongestChainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InLongestChainResponse proto.InternalMessageInfo

func (m *InLongestChainResponse) GetInLongestChain() bool {
	if m != nil {
		return m.InLongestChain
	}
	return false
}

func (m *InLongestChainResponse) GetIrreversible() bool {
	if m != nil {
		return m.Irreversible
	}
	return false
}

type BlockIDResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BlockTimeMilli       int64    `protobuf:"varint,2,opt,name=blockTimeMilli,proto3" json:"blockTimeMilli,omitempty"`
	Irreversible         bool     `protobuf:"varint,3,opt,name=irreversible,proto3" json:"irreversible,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockIDResponse) Reset()         { *m = BlockIDResponse{} }
func (m *BlockIDResponse) String() string { return proto.CompactTextString(m) }
func (*BlockIDResponse) ProtoMessage()    {}
func (*BlockIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_05a582e363a28944, []int{7}
}

func (m *BlockIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockIDResponse.Unmarshal(m, b)
}
func (m *BlockIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockIDResponse.Marshal(b, m, deterministic)
}
func (m *BlockIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockIDResponse.Merge(m, src)
}
func (m *BlockIDResponse) XXX_Size() int {
	return xxx_messageInfo_BlockIDResponse.Size(m)
}
func (m *BlockIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BlockIDResponse proto.InternalMessageInfo

func (m *BlockIDResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BlockIDResponse) GetBlockTimeMilli() int64 {
	if m != nil {
		return m.BlockTimeMilli
	}
	return 0
}

func (m *BlockIDResponse) GetIrreversible() bool {
	if m != nil {
		return m.Irreversible
	}
	return false
}

func init() {
	proto.RegisterType((*LIBRequest)(nil), "dfuse.blockmeta.v1.LIBRequest")
	proto.RegisterType((*NumToIDRequest)(nil), "dfuse.blockmeta.v1.NumToIDRequest")
	proto.RegisterType((*TimeRequest)(nil), "dfuse.blockmeta.v1.TimeRequest")
	proto.RegisterType((*RelativeTimeRequest)(nil), "dfuse.blockmeta.v1.RelativeTimeRequest")
	proto.RegisterType((*BlockResponse)(nil), "dfuse.blockmeta.v1.BlockResponse")
	proto.RegisterType((*InLongestChainRequest)(nil), "dfuse.blockmeta.v1.InLongestChainRequest")
	proto.RegisterType((*InLongestChainResponse)(nil), "dfuse.blockmeta.v1.InLongestChainResponse")
	proto.RegisterType((*BlockIDResponse)(nil), "dfuse.blockmeta.v1.BlockIDResponse")
}

func init() { proto.RegisterFile("dfuse/blockmeta/v1/blockmeta.proto", fileDescriptor_05a582e363a28944) }

var fileDescriptor_05a582e363a28944 = []byte{
	// 487 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x55, 0xdc, 0x8f, 0xa4, 0xd3, 0x12, 0xa4, 0x45, 0xa0, 0xc8, 0x42, 0xb4, 0x2c, 0x52, 0x29,
	0xa8, 0x5a, 0x2b, 0xe1, 0xcc, 0xa1, 0x26, 0x07, 0x2c, 0x85, 0x1e, 0x96, 0x9c, 0xb8, 0xf9, 0x63,
	0xe2, 0xae, 0xb0, 0xbd, 0xc1, 0xbb, 0xf6, 0x8d, 0x5f, 0xc4, 0x8f, 0x04, 0x79, 0x63, 0x37, 0x75,
	0xe2, 0x4a, 0x96, 0xe8, 0x71, 0xc7, 0x6f, 0xde, 0x7b, 0x3b, 0xfb, 0xc6, 0x40, 0xa3, 0x55, 0xa1,
	0xd0, 0x09, 0x12, 0x19, 0xfe, 0x4c, 0x51, 0xfb, 0x4e, 0x39, 0xdd, 0x1e, 0xd8, 0x3a, 0x97, 0x5a,
	0x12, 0x62, 0x30, 0x6c, 0x5b, 0x2e, 0xa7, 0xf6, 0x79, 0x2c, 0x65, 0x9c, 0xa0, 0x63, 0x10, 0x41,
	0xb1, 0x72, 0xb4, 0x48, 0x51, 0x69, 0x3f, 0x5d, 0x6f, 0x9a, 0xe8, 0x19, 0xc0, 0xc2, 0x73, 0x39,
	0xfe, 0x2a, 0x50, 0x69, 0x7a, 0x0d, 0xe3, 0xdb, 0x22, 0x5d, 0x4a, 0x6f, 0x5e, 0x57, 0x88, 0x0d,
	0x23, 0x43, 0x78, 0x5b, 0xa4, 0x93, 0xc1, 0xc5, 0xe0, 0xea, 0x90, 0xdf, 0x9f, 0xe9, 0x67, 0x38,
	0x5d, 0x8a, 0x14, 0x1b, 0x28, 0x83, 0xc3, 0x8a, 0xdd, 0xc0, 0x4e, 0x67, 0x36, 0xdb, 0x48, 0xb3,
	0x46, 0x9a, 0x2d, 0x1b, 0x69, 0x6e, 0x70, 0x34, 0x84, 0x17, 0x1c, 0x13, 0x5f, 0x8b, 0x12, 0xff,
	0x83, 0x86, 0xbc, 0x86, 0x13, 0x91, 0x85, 0x49, 0xa1, 0x44, 0x89, 0x13, 0xeb, 0x62, 0x70, 0x35,
	0xe2, 0xdb, 0x02, 0x55, 0xf0, 0xcc, 0xad, 0xfc, 0x72, 0x54, 0x6b, 0x99, 0x29, 0x24, 0x63, 0xb0,
	0x44, 0x64, 0xc8, 0x4f, 0xb8, 0x25, 0xa2, 0x7b, 0x39, 0xab, 0xa7, 0x1c, 0x85, 0x33, 0x91, 0xe7,
	0x58, 0x62, 0xae, 0x44, 0x90, 0xe0, 0xe4, 0xc0, 0x28, 0xb6, 0x6a, 0x74, 0x0a, 0x2f, 0xbd, 0x6c,
	0x21, 0xb3, 0x18, 0x95, 0xfe, 0x72, 0xe7, 0x8b, 0xac, 0xb9, 0xdb, 0x04, 0x86, 0x66, 0x7a, 0xde,
	0xbc, 0x76, 0xd0, 0x1c, 0x69, 0x04, 0xaf, 0x76, 0x5b, 0x6a, 0xc3, 0x97, 0x30, 0x16, 0xad, 0x2f,
	0xa6, 0x75, 0xc4, 0x77, 0xaa, 0x7b, 0xc6, 0xac, 0x0e, 0x63, 0x29, 0x3c, 0x77, 0x37, 0x82, 0x8f,
	0xce, 0xe3, 0x12, 0xc6, 0xc6, 0x53, 0x75, 0xef, 0x6f, 0x22, 0x49, 0x84, 0x21, 0x3a, 0xe0, 0x3b,
	0xd5, 0x3e, 0x73, 0x98, 0xfd, 0x1d, 0xc0, 0xa8, 0xea, 0xa8, 0x02, 0x45, 0xbe, 0x82, 0x75, 0xa3,
	0xc9, 0x39, 0xdb, 0x4f, 0x29, 0x7b, 0xf0, 0xfc, 0xf6, 0xdb, 0x2e, 0x40, 0xfb, 0x09, 0xbf, 0xc3,
	0xd1, 0xcd, 0x4a, 0x63, 0x4e, 0xde, 0x77, 0x61, 0x3b, 0x32, 0xd5, 0x87, 0x74, 0x09, 0xc7, 0x2e,
	0xae, 0x64, 0x8e, 0x4f, 0xc9, 0x3a, 0xfb, 0x33, 0x80, 0x61, 0x3d, 0x71, 0xc2, 0x61, 0x58, 0x2f,
	0x17, 0xa1, 0x5d, 0x9d, 0xed, 0xcd, 0xb3, 0xdf, 0x3d, 0xca, 0xfe, 0xe0, 0xf5, 0x16, 0x70, 0xb4,
	0xf0, 0x5c, 0x6f, 0x4e, 0xde, 0x74, 0xa1, 0xb7, 0x9b, 0xdd, 0x8b, 0x6d, 0xf6, 0x1b, 0x88, 0xc9,
	0xd2, 0x5c, 0xa8, 0x30, 0x17, 0xa9, 0xc8, 0x7c, 0x2d, 0x73, 0x12, 0xc3, 0xb8, 0x1d, 0x4d, 0xf2,
	0xa1, 0x8b, 0xac, 0x33, 0xf1, 0xf6, 0xc7, 0x3e, 0xd0, 0x8d, 0xbc, 0xcb, 0x7e, 0x5c, 0xc7, 0x42,
	0xdf, 0x15, 0x01, 0x0b, 0x65, 0xea, 0xa0, 0x54, 0xa1, 0x9f, 0xf9, 0x91, 0xef, 0xac, 0x83, 0x58,
	0x3a, 0xfb, 0x3f, 0xc0, 0xe0, 0xd8, 0x2c, 0xe9, 0xa7, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x3c,
	0x51, 0xb5, 0xb6, 0x1d, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TimeToIDClient is the client API for TimeToID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TimeToIDClient interface {
	At(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	After(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error)
	Before(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error)
}

type timeToIDClient struct {
	cc *grpc.ClientConn
}

func NewTimeToIDClient(cc *grpc.ClientConn) TimeToIDClient {
	return &timeToIDClient{cc}
}

func (c *timeToIDClient) At(ctx context.Context, in *TimeRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/dfuse.blockmeta.v1.TimeToID/At", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeToIDClient) After(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/dfuse.blockmeta.v1.TimeToID/After", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeToIDClient) Before(ctx context.Context, in *RelativeTimeRequest, opts ...grpc.CallOption) (*BlockResponse, error) {
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, "/dfuse.blockmeta.v1.TimeToID/Before", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeToIDServer is the server API for TimeToID service.
type TimeToIDServer interface {
	At(context.Context, *TimeRequest) (*BlockResponse, error)
	After(context.Context, *RelativeTimeRequest) (*BlockResponse, error)
	Before(context.Context, *RelativeTimeRequest) (*BlockResponse, error)
}

// UnimplementedTimeToIDServer can be embedded to have forward compatible implementations.
type UnimplementedTimeToIDServer struct {
}

func (*UnimplementedTimeToIDServer) At(ctx context.Context, req *TimeRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method At not implemented")
}
func (*UnimplementedTimeToIDServer) After(ctx context.Context, req *RelativeTimeRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method After not implemented")
}
func (*UnimplementedTimeToIDServer) Before(ctx context.Context, req *RelativeTimeRequest) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Before not implemented")
}

func RegisterTimeToIDServer(s *grpc.Server, srv TimeToIDServer) {
	s.RegisterService(&_TimeToID_serviceDesc, srv)
}

func _TimeToID_At_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeToIDServer).At(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.blockmeta.v1.TimeToID/At",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeToIDServer).At(ctx, req.(*TimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeToID_After_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelativeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeToIDServer).After(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.blockmeta.v1.TimeToID/After",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeToIDServer).After(ctx, req.(*RelativeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeToID_Before_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelativeTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeToIDServer).Before(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.blockmeta.v1.TimeToID/Before",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeToIDServer).Before(ctx, req.(*RelativeTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TimeToID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.blockmeta.v1.TimeToID",
	HandlerType: (*TimeToIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "At",
			Handler:    _TimeToID_At_Handler,
		},
		{
			MethodName: "After",
			Handler:    _TimeToID_After_Handler,
		},
		{
			MethodName: "Before",
			Handler:    _TimeToID_Before_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfuse/blockmeta/v1/blockmeta.proto",
}

// BlockIDClient is the client API for BlockID service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockIDClient interface {
	//
	NumToID(ctx context.Context, in *NumToIDRequest, opts ...grpc.CallOption) (*BlockIDResponse, error)
	// Query the CURRENT irreversible block
	LIBID(ctx context.Context, in *LIBRequest, opts ...grpc.CallOption) (*BlockIDResponse, error)
}

type blockIDClient struct {
	cc *grpc.ClientConn
}

func NewBlockIDClient(cc *grpc.ClientConn) BlockIDClient {
	return &blockIDClient{cc}
}

func (c *blockIDClient) NumToID(ctx context.Context, in *NumToIDRequest, opts ...grpc.CallOption) (*BlockIDResponse, error) {
	out := new(BlockIDResponse)
	err := c.cc.Invoke(ctx, "/dfuse.blockmeta.v1.BlockID/NumToID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockIDClient) LIBID(ctx context.Context, in *LIBRequest, opts ...grpc.CallOption) (*BlockIDResponse, error) {
	out := new(BlockIDResponse)
	err := c.cc.Invoke(ctx, "/dfuse.blockmeta.v1.BlockID/LIBID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockIDServer is the server API for BlockID service.
type BlockIDServer interface {
	//
	NumToID(context.Context, *NumToIDRequest) (*BlockIDResponse, error)
	// Query the CURRENT irreversible block
	LIBID(context.Context, *LIBRequest) (*BlockIDResponse, error)
}

// UnimplementedBlockIDServer can be embedded to have forward compatible implementations.
type UnimplementedBlockIDServer struct {
}

func (*UnimplementedBlockIDServer) NumToID(ctx context.Context, req *NumToIDRequest) (*BlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumToID not implemented")
}
func (*UnimplementedBlockIDServer) LIBID(ctx context.Context, req *LIBRequest) (*BlockIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LIBID not implemented")
}

func RegisterBlockIDServer(s *grpc.Server, srv BlockIDServer) {
	s.RegisterService(&_BlockID_serviceDesc, srv)
}

func _BlockID_NumToID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumToIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIDServer).NumToID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.blockmeta.v1.BlockID/NumToID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIDServer).NumToID(ctx, req.(*NumToIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockID_LIBID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LIBRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockIDServer).LIBID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.blockmeta.v1.BlockID/LIBID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockIDServer).LIBID(ctx, req.(*LIBRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlockID_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.blockmeta.v1.BlockID",
	HandlerType: (*BlockIDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NumToID",
			Handler:    _BlockID_NumToID_Handler,
		},
		{
			MethodName: "LIBID",
			Handler:    _BlockID_LIBID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfuse/blockmeta/v1/blockmeta.proto",
}

// ChainDiscriminatorClient is the client API for ChainDiscriminator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainDiscriminatorClient interface {
	InLongestChain(ctx context.Context, in *InLongestChainRequest, opts ...grpc.CallOption) (*InLongestChainResponse, error)
}

type chainDiscriminatorClient struct {
	cc *grpc.ClientConn
}

func NewChainDiscriminatorClient(cc *grpc.ClientConn) ChainDiscriminatorClient {
	return &chainDiscriminatorClient{cc}
}

func (c *chainDiscriminatorClient) InLongestChain(ctx context.Context, in *InLongestChainRequest, opts ...grpc.CallOption) (*InLongestChainResponse, error) {
	out := new(InLongestChainResponse)
	err := c.cc.Invoke(ctx, "/dfuse.blockmeta.v1.ChainDiscriminator/InLongestChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainDiscriminatorServer is the server API for ChainDiscriminator service.
type ChainDiscriminatorServer interface {
	InLongestChain(context.Context, *InLongestChainRequest) (*InLongestChainResponse, error)
}

// UnimplementedChainDiscriminatorServer can be embedded to have forward compatible implementations.
type UnimplementedChainDiscriminatorServer struct {
}

func (*UnimplementedChainDiscriminatorServer) InLongestChain(ctx context.Context, req *InLongestChainRequest) (*InLongestChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InLongestChain not implemented")
}

func RegisterChainDiscriminatorServer(s *grpc.Server, srv ChainDiscriminatorServer) {
	s.RegisterService(&_ChainDiscriminator_serviceDesc, srv)
}

func _ChainDiscriminator_InLongestChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InLongestChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainDiscriminatorServer).InLongestChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dfuse.blockmeta.v1.ChainDiscriminator/InLongestChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainDiscriminatorServer).InLongestChain(ctx, req.(*InLongestChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainDiscriminator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.blockmeta.v1.ChainDiscriminator",
	HandlerType: (*ChainDiscriminatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InLongestChain",
			Handler:    _ChainDiscriminator_InLongestChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfuse/blockmeta/v1/blockmeta.proto",
}
