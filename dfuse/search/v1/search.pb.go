// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfuse/search/v1/search.proto

package v1

import (
	context "context"
	fmt "fmt"
	deos "github.com/dfuse-io/pbgo/dfuse/codecs/deos"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RouterRequest_Mode int32

const (
	RouterRequest_STREAMING RouterRequest_Mode = 0
	RouterRequest_PAGINATED RouterRequest_Mode = 1
)

var RouterRequest_Mode_name = map[int32]string{
	0: "STREAMING",
	1: "PAGINATED",
}

var RouterRequest_Mode_value = map[string]int32{
	"STREAMING": 0,
	"PAGINATED": 1,
}

func (x RouterRequest_Mode) String() string {
	return proto.EnumName(RouterRequest_Mode_name, int32(x))
}

func (RouterRequest_Mode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{4, 0}
}

type TransactionCursor struct {
	Version                     uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	BlockNum                    uint64   `protobuf:"varint,2,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockId                     []byte   `protobuf:"bytes,3,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	TransactionHashPrefix       []byte   `protobuf:"bytes,5,opt,name=transaction_hash_prefix,json=transactionHashPrefix,proto3" json:"transaction_hash_prefix,omitempty"`
	TransactionIndexWithinBlock int64    `protobuf:"varint,6,opt,name=transaction_index_within_block,json=transactionIndexWithinBlock,proto3" json:"transaction_index_within_block,omitempty"`
	XXX_NoUnkeyedLiteral        struct{} `json:"-"`
	XXX_unrecognized            []byte   `json:"-"`
	XXX_sizecache               int32    `json:"-"`
}

func (m *TransactionCursor) Reset()         { *m = TransactionCursor{} }
func (m *TransactionCursor) String() string { return proto.CompactTextString(m) }
func (*TransactionCursor) ProtoMessage()    {}
func (*TransactionCursor) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{0}
}

func (m *TransactionCursor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionCursor.Unmarshal(m, b)
}
func (m *TransactionCursor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionCursor.Marshal(b, m, deterministic)
}
func (m *TransactionCursor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionCursor.Merge(m, src)
}
func (m *TransactionCursor) XXX_Size() int {
	return xxx_messageInfo_TransactionCursor.Size(m)
}
func (m *TransactionCursor) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionCursor.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionCursor proto.InternalMessageInfo

func (m *TransactionCursor) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *TransactionCursor) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *TransactionCursor) GetBlockId() []byte {
	if m != nil {
		return m.BlockId
	}
	return nil
}

func (m *TransactionCursor) GetTransactionHashPrefix() []byte {
	if m != nil {
		return m.TransactionHashPrefix
	}
	return nil
}

func (m *TransactionCursor) GetTransactionIndexWithinBlock() int64 {
	if m != nil {
		return m.TransactionIndexWithinBlock
	}
	return 0
}

type ForkResolveRequest struct {
	Query                string      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	ForkedBlockRefs      []*BlockRef `protobuf:"bytes,2,rep,name=forkedBlockRefs,proto3" json:"forkedBlockRefs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ForkResolveRequest) Reset()         { *m = ForkResolveRequest{} }
func (m *ForkResolveRequest) String() string { return proto.CompactTextString(m) }
func (*ForkResolveRequest) ProtoMessage()    {}
func (*ForkResolveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{1}
}

func (m *ForkResolveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForkResolveRequest.Unmarshal(m, b)
}
func (m *ForkResolveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForkResolveRequest.Marshal(b, m, deterministic)
}
func (m *ForkResolveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForkResolveRequest.Merge(m, src)
}
func (m *ForkResolveRequest) XXX_Size() int {
	return xxx_messageInfo_ForkResolveRequest.Size(m)
}
func (m *ForkResolveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForkResolveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForkResolveRequest proto.InternalMessageInfo

func (m *ForkResolveRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *ForkResolveRequest) GetForkedBlockRefs() []*BlockRef {
	if m != nil {
		return m.ForkedBlockRefs
	}
	return nil
}

type BlockRef struct {
	BlockNum             uint64   `protobuf:"varint,1,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	BlockID              string   `protobuf:"bytes,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRef) Reset()         { *m = BlockRef{} }
func (m *BlockRef) String() string { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()    {}
func (*BlockRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{2}
}

func (m *BlockRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRef.Unmarshal(m, b)
}
func (m *BlockRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRef.Marshal(b, m, deterministic)
}
func (m *BlockRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRef.Merge(m, src)
}
func (m *BlockRef) XXX_Size() int {
	return xxx_messageInfo_BlockRef.Size(m)
}
func (m *BlockRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRef.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRef proto.InternalMessageInfo

func (m *BlockRef) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *BlockRef) GetBlockID() string {
	if m != nil {
		return m.BlockID
	}
	return ""
}

type BackendRequest struct {
	Query        string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LowBlockNum  uint64 `protobuf:"varint,2,opt,name=lowBlockNum,proto3" json:"lowBlockNum,omitempty"`
	HighBlockNum uint64 `protobuf:"varint,3,opt,name=highBlockNum,proto3" json:"highBlockNum,omitempty"`
	Descending   bool   `protobuf:"varint,4,opt,name=descending,proto3" json:"descending,omitempty"`
	// More specific to the live / reversible backend
	WithReversible       bool     `protobuf:"varint,5,opt,name=withReversible,proto3" json:"withReversible,omitempty"`
	LiveMarkerInterval   uint64   `protobuf:"varint,6,opt,name=liveMarkerInterval,proto3" json:"liveMarkerInterval,omitempty"`
	StopAtVirtualHead    bool     `protobuf:"varint,7,opt,name=stopAtVirtualHead,proto3" json:"stopAtVirtualHead,omitempty"`
	NavigateFromBlockID  string   `protobuf:"bytes,8,opt,name=navigateFromBlockID,proto3" json:"navigateFromBlockID,omitempty"`
	NavigateFromBlockNum uint64   `protobuf:"varint,9,opt,name=navigateFromBlockNum,proto3" json:"navigateFromBlockNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BackendRequest) Reset()         { *m = BackendRequest{} }
func (m *BackendRequest) String() string { return proto.CompactTextString(m) }
func (*BackendRequest) ProtoMessage()    {}
func (*BackendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{3}
}

func (m *BackendRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BackendRequest.Unmarshal(m, b)
}
func (m *BackendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BackendRequest.Marshal(b, m, deterministic)
}
func (m *BackendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BackendRequest.Merge(m, src)
}
func (m *BackendRequest) XXX_Size() int {
	return xxx_messageInfo_BackendRequest.Size(m)
}
func (m *BackendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BackendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BackendRequest proto.InternalMessageInfo

func (m *BackendRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *BackendRequest) GetLowBlockNum() uint64 {
	if m != nil {
		return m.LowBlockNum
	}
	return 0
}

func (m *BackendRequest) GetHighBlockNum() uint64 {
	if m != nil {
		return m.HighBlockNum
	}
	return 0
}

func (m *BackendRequest) GetDescending() bool {
	if m != nil {
		return m.Descending
	}
	return false
}

func (m *BackendRequest) GetWithReversible() bool {
	if m != nil {
		return m.WithReversible
	}
	return false
}

func (m *BackendRequest) GetLiveMarkerInterval() uint64 {
	if m != nil {
		return m.LiveMarkerInterval
	}
	return 0
}

func (m *BackendRequest) GetStopAtVirtualHead() bool {
	if m != nil {
		return m.StopAtVirtualHead
	}
	return false
}

func (m *BackendRequest) GetNavigateFromBlockID() string {
	if m != nil {
		return m.NavigateFromBlockID
	}
	return ""
}

func (m *BackendRequest) GetNavigateFromBlockNum() uint64 {
	if m != nil {
		return m.NavigateFromBlockNum
	}
	return 0
}

type RouterRequest struct {
	Query              string             `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	LowBlockNum        int64              `protobuf:"varint,2,opt,name=lowBlockNum,proto3" json:"lowBlockNum,omitempty"`
	HighBlockNum       int64              `protobuf:"varint,3,opt,name=highBlockNum,proto3" json:"highBlockNum,omitempty"`
	LowBlockUnbounded  bool               `protobuf:"varint,13,opt,name=lowBlockUnbounded,proto3" json:"lowBlockUnbounded,omitempty"`
	HighBlockUnbounded bool               `protobuf:"varint,14,opt,name=highBlockUnbounded,proto3" json:"highBlockUnbounded,omitempty"`
	Descending         bool               `protobuf:"varint,4,opt,name=descending,proto3" json:"descending,omitempty"`
	Cursor             string             `protobuf:"bytes,5,opt,name=cursor,proto3" json:"cursor,omitempty"`
	TrxCursor          *TransactionCursor `protobuf:"bytes,15,opt,name=TrxCursor,proto3" json:"TrxCursor,omitempty"`
	Limit              int64              `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	WithReversible     bool               `protobuf:"varint,7,opt,name=withReversible,proto3" json:"withReversible,omitempty"`
	Mode               RouterRequest_Mode `protobuf:"varint,8,opt,name=mode,proto3,enum=dfuse.search.v1.RouterRequest_Mode" json:"mode,omitempty"`
	// Legacy boundaries, overrides `lowBlockNum` and `highBlockNum`.
	UseLegacyBoundaries  bool     `protobuf:"varint,9,opt,name=useLegacyBoundaries,proto3" json:"useLegacyBoundaries,omitempty"`
	StartBlock           uint64   `protobuf:"varint,10,opt,name=startBlock,proto3" json:"startBlock,omitempty"`
	BlockCount           uint64   `protobuf:"varint,11,opt,name=blockCount,proto3" json:"blockCount,omitempty"`
	LiveMarkerInterval   uint64   `protobuf:"varint,12,opt,name=liveMarkerInterval,proto3" json:"liveMarkerInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RouterRequest) Reset()         { *m = RouterRequest{} }
func (m *RouterRequest) String() string { return proto.CompactTextString(m) }
func (*RouterRequest) ProtoMessage()    {}
func (*RouterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{4}
}

func (m *RouterRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RouterRequest.Unmarshal(m, b)
}
func (m *RouterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RouterRequest.Marshal(b, m, deterministic)
}
func (m *RouterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RouterRequest.Merge(m, src)
}
func (m *RouterRequest) XXX_Size() int {
	return xxx_messageInfo_RouterRequest.Size(m)
}
func (m *RouterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RouterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RouterRequest proto.InternalMessageInfo

func (m *RouterRequest) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *RouterRequest) GetLowBlockNum() int64 {
	if m != nil {
		return m.LowBlockNum
	}
	return 0
}

func (m *RouterRequest) GetHighBlockNum() int64 {
	if m != nil {
		return m.HighBlockNum
	}
	return 0
}

func (m *RouterRequest) GetLowBlockUnbounded() bool {
	if m != nil {
		return m.LowBlockUnbounded
	}
	return false
}

func (m *RouterRequest) GetHighBlockUnbounded() bool {
	if m != nil {
		return m.HighBlockUnbounded
	}
	return false
}

func (m *RouterRequest) GetDescending() bool {
	if m != nil {
		return m.Descending
	}
	return false
}

func (m *RouterRequest) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *RouterRequest) GetTrxCursor() *TransactionCursor {
	if m != nil {
		return m.TrxCursor
	}
	return nil
}

func (m *RouterRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RouterRequest) GetWithReversible() bool {
	if m != nil {
		return m.WithReversible
	}
	return false
}

func (m *RouterRequest) GetMode() RouterRequest_Mode {
	if m != nil {
		return m.Mode
	}
	return RouterRequest_STREAMING
}

func (m *RouterRequest) GetUseLegacyBoundaries() bool {
	if m != nil {
		return m.UseLegacyBoundaries
	}
	return false
}

func (m *RouterRequest) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *RouterRequest) GetBlockCount() uint64 {
	if m != nil {
		return m.BlockCount
	}
	return 0
}

func (m *RouterRequest) GetLiveMarkerInterval() uint64 {
	if m != nil {
		return m.LiveMarkerInterval
	}
	return 0
}

type SearchMatch struct {
	TrxIdPrefix string             `protobuf:"bytes,1,opt,name=trxIdPrefix,proto3" json:"trxIdPrefix,omitempty"`
	BlockNum    uint64             `protobuf:"varint,2,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	Index       uint64             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Cursor      string             `protobuf:"bytes,4,opt,name=cursor,proto3" json:"cursor,omitempty"`
	TrxCursor   *TransactionCursor `protobuf:"bytes,12,opt,name=TrxCursor,proto3" json:"TrxCursor,omitempty"`
	// Types that are valid to be assigned to Specific:
	//	*SearchMatch_Eos
	//	*SearchMatch_Eth
	Specific             isSearchMatch_Specific `protobuf_oneof:"specific"`
	Undo                 bool                   `protobuf:"varint,25,opt,name=undo,proto3" json:"undo,omitempty"`
	IrrBlockNum          uint64                 `protobuf:"varint,26,opt,name=irrBlockNum,proto3" json:"irrBlockNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SearchMatch) Reset()         { *m = SearchMatch{} }
func (m *SearchMatch) String() string { return proto.CompactTextString(m) }
func (*SearchMatch) ProtoMessage()    {}
func (*SearchMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{5}
}

func (m *SearchMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchMatch.Unmarshal(m, b)
}
func (m *SearchMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchMatch.Marshal(b, m, deterministic)
}
func (m *SearchMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchMatch.Merge(m, src)
}
func (m *SearchMatch) XXX_Size() int {
	return xxx_messageInfo_SearchMatch.Size(m)
}
func (m *SearchMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchMatch.DiscardUnknown(m)
}

var xxx_messageInfo_SearchMatch proto.InternalMessageInfo

func (m *SearchMatch) GetTrxIdPrefix() string {
	if m != nil {
		return m.TrxIdPrefix
	}
	return ""
}

func (m *SearchMatch) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *SearchMatch) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *SearchMatch) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *SearchMatch) GetTrxCursor() *TransactionCursor {
	if m != nil {
		return m.TrxCursor
	}
	return nil
}

type isSearchMatch_Specific interface {
	isSearchMatch_Specific()
}

type SearchMatch_Eos struct {
	Eos *EOSMatch `protobuf:"bytes,10,opt,name=eos,proto3,oneof"`
}

type SearchMatch_Eth struct {
	Eth *ETHMatch `protobuf:"bytes,11,opt,name=eth,proto3,oneof"`
}

func (*SearchMatch_Eos) isSearchMatch_Specific() {}

func (*SearchMatch_Eth) isSearchMatch_Specific() {}

func (m *SearchMatch) GetSpecific() isSearchMatch_Specific {
	if m != nil {
		return m.Specific
	}
	return nil
}

func (m *SearchMatch) GetEos() *EOSMatch {
	if x, ok := m.GetSpecific().(*SearchMatch_Eos); ok {
		return x.Eos
	}
	return nil
}

func (m *SearchMatch) GetEth() *ETHMatch {
	if x, ok := m.GetSpecific().(*SearchMatch_Eth); ok {
		return x.Eth
	}
	return nil
}

func (m *SearchMatch) GetUndo() bool {
	if m != nil {
		return m.Undo
	}
	return false
}

func (m *SearchMatch) GetIrrBlockNum() uint64 {
	if m != nil {
		return m.IrrBlockNum
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*SearchMatch) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*SearchMatch_Eos)(nil),
		(*SearchMatch_Eth)(nil),
	}
}

type EOSDocumentID struct {
	BlockNum             uint64   `protobuf:"varint,1,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	ActionIndex          uint64   `protobuf:"varint,2,opt,name=actionIndex,proto3" json:"actionIndex,omitempty"`
	TransactionIndex     uint64   `protobuf:"varint,3,opt,name=transactionIndex,proto3" json:"transactionIndex,omitempty"`
	TransactionIDPrefix  []byte   `protobuf:"bytes,4,opt,name=transactionIDPrefix,proto3" json:"transactionIDPrefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EOSDocumentID) Reset()         { *m = EOSDocumentID{} }
func (m *EOSDocumentID) String() string { return proto.CompactTextString(m) }
func (*EOSDocumentID) ProtoMessage()    {}
func (*EOSDocumentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{6}
}

func (m *EOSDocumentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EOSDocumentID.Unmarshal(m, b)
}
func (m *EOSDocumentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EOSDocumentID.Marshal(b, m, deterministic)
}
func (m *EOSDocumentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EOSDocumentID.Merge(m, src)
}
func (m *EOSDocumentID) XXX_Size() int {
	return xxx_messageInfo_EOSDocumentID.Size(m)
}
func (m *EOSDocumentID) XXX_DiscardUnknown() {
	xxx_messageInfo_EOSDocumentID.DiscardUnknown(m)
}

var xxx_messageInfo_EOSDocumentID proto.InternalMessageInfo

func (m *EOSDocumentID) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *EOSDocumentID) GetActionIndex() uint64 {
	if m != nil {
		return m.ActionIndex
	}
	return 0
}

func (m *EOSDocumentID) GetTransactionIndex() uint64 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *EOSDocumentID) GetTransactionIDPrefix() []byte {
	if m != nil {
		return m.TransactionIDPrefix
	}
	return nil
}

type EOSMatch struct {
	ActionIndexes        []uint32            `protobuf:"varint,1,rep,packed,name=actionIndexes,proto3" json:"actionIndexes,omitempty"`
	Block                *EOSBlockTrxPayload `protobuf:"bytes,8,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *EOSMatch) Reset()         { *m = EOSMatch{} }
func (m *EOSMatch) String() string { return proto.CompactTextString(m) }
func (*EOSMatch) ProtoMessage()    {}
func (*EOSMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{7}
}

func (m *EOSMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EOSMatch.Unmarshal(m, b)
}
func (m *EOSMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EOSMatch.Marshal(b, m, deterministic)
}
func (m *EOSMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EOSMatch.Merge(m, src)
}
func (m *EOSMatch) XXX_Size() int {
	return xxx_messageInfo_EOSMatch.Size(m)
}
func (m *EOSMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_EOSMatch.DiscardUnknown(m)
}

var xxx_messageInfo_EOSMatch proto.InternalMessageInfo

func (m *EOSMatch) GetActionIndexes() []uint32 {
	if m != nil {
		return m.ActionIndexes
	}
	return nil
}

func (m *EOSMatch) GetBlock() *EOSBlockTrxPayload {
	if m != nil {
		return m.Block
	}
	return nil
}

type EOSBlockTrxPayload struct {
	BlockHeader          *deos.BlockHeader      `protobuf:"bytes,1,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
	BlockID              string                 `protobuf:"bytes,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
	Trace                *deos.TransactionTrace `protobuf:"bytes,6,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *EOSBlockTrxPayload) Reset()         { *m = EOSBlockTrxPayload{} }
func (m *EOSBlockTrxPayload) String() string { return proto.CompactTextString(m) }
func (*EOSBlockTrxPayload) ProtoMessage()    {}
func (*EOSBlockTrxPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{8}
}

func (m *EOSBlockTrxPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EOSBlockTrxPayload.Unmarshal(m, b)
}
func (m *EOSBlockTrxPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EOSBlockTrxPayload.Marshal(b, m, deterministic)
}
func (m *EOSBlockTrxPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EOSBlockTrxPayload.Merge(m, src)
}
func (m *EOSBlockTrxPayload) XXX_Size() int {
	return xxx_messageInfo_EOSBlockTrxPayload.Size(m)
}
func (m *EOSBlockTrxPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_EOSBlockTrxPayload.DiscardUnknown(m)
}

var xxx_messageInfo_EOSBlockTrxPayload proto.InternalMessageInfo

func (m *EOSBlockTrxPayload) GetBlockHeader() *deos.BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *EOSBlockTrxPayload) GetBlockID() string {
	if m != nil {
		return m.BlockID
	}
	return ""
}

func (m *EOSBlockTrxPayload) GetTrace() *deos.TransactionTrace {
	if m != nil {
		return m.Trace
	}
	return nil
}

type ETHMatch struct {
	CallIndexes          []uint32            `protobuf:"varint,1,rep,packed,name=callIndexes,proto3" json:"callIndexes,omitempty"`
	LogIndexes           []uint32            `protobuf:"varint,2,rep,packed,name=logIndexes,proto3" json:"logIndexes,omitempty"`
	Block                *ETHBlockTrxPayload `protobuf:"bytes,8,opt,name=block,proto3" json:"block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ETHMatch) Reset()         { *m = ETHMatch{} }
func (m *ETHMatch) String() string { return proto.CompactTextString(m) }
func (*ETHMatch) ProtoMessage()    {}
func (*ETHMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{9}
}

func (m *ETHMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ETHMatch.Unmarshal(m, b)
}
func (m *ETHMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ETHMatch.Marshal(b, m, deterministic)
}
func (m *ETHMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHMatch.Merge(m, src)
}
func (m *ETHMatch) XXX_Size() int {
	return xxx_messageInfo_ETHMatch.Size(m)
}
func (m *ETHMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHMatch.DiscardUnknown(m)
}

var xxx_messageInfo_ETHMatch proto.InternalMessageInfo

func (m *ETHMatch) GetCallIndexes() []uint32 {
	if m != nil {
		return m.CallIndexes
	}
	return nil
}

func (m *ETHMatch) GetLogIndexes() []uint32 {
	if m != nil {
		return m.LogIndexes
	}
	return nil
}

func (m *ETHMatch) GetBlock() *ETHBlockTrxPayload {
	if m != nil {
		return m.Block
	}
	return nil
}

type ETHBlockTrxPayload struct {
	// Expected to be a deth.BlockHeader
	BlockHeader []byte `protobuf:"bytes,1,opt,name=blockHeader,proto3" json:"blockHeader,omitempty"`
	BlockID     string `protobuf:"bytes,2,opt,name=blockID,proto3" json:"blockID,omitempty"`
	BlockNum    uint64 `protobuf:"varint,3,opt,name=blockNum,proto3" json:"blockNum,omitempty"`
	// Expected to be a deth.SignedTransaction
	Trace                []byte   `protobuf:"bytes,10,opt,name=trace,proto3" json:"trace,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ETHBlockTrxPayload) Reset()         { *m = ETHBlockTrxPayload{} }
func (m *ETHBlockTrxPayload) String() string { return proto.CompactTextString(m) }
func (*ETHBlockTrxPayload) ProtoMessage()    {}
func (*ETHBlockTrxPayload) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a664997e27fcf00, []int{10}
}

func (m *ETHBlockTrxPayload) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ETHBlockTrxPayload.Unmarshal(m, b)
}
func (m *ETHBlockTrxPayload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ETHBlockTrxPayload.Marshal(b, m, deterministic)
}
func (m *ETHBlockTrxPayload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ETHBlockTrxPayload.Merge(m, src)
}
func (m *ETHBlockTrxPayload) XXX_Size() int {
	return xxx_messageInfo_ETHBlockTrxPayload.Size(m)
}
func (m *ETHBlockTrxPayload) XXX_DiscardUnknown() {
	xxx_messageInfo_ETHBlockTrxPayload.DiscardUnknown(m)
}

var xxx_messageInfo_ETHBlockTrxPayload proto.InternalMessageInfo

func (m *ETHBlockTrxPayload) GetBlockHeader() []byte {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

func (m *ETHBlockTrxPayload) GetBlockID() string {
	if m != nil {
		return m.BlockID
	}
	return ""
}

func (m *ETHBlockTrxPayload) GetBlockNum() uint64 {
	if m != nil {
		return m.BlockNum
	}
	return 0
}

func (m *ETHBlockTrxPayload) GetTrace() []byte {
	if m != nil {
		return m.Trace
	}
	return nil
}

func init() {
	proto.RegisterEnum("dfuse.search.v1.RouterRequest_Mode", RouterRequest_Mode_name, RouterRequest_Mode_value)
	proto.RegisterType((*TransactionCursor)(nil), "dfuse.search.v1.TransactionCursor")
	proto.RegisterType((*ForkResolveRequest)(nil), "dfuse.search.v1.ForkResolveRequest")
	proto.RegisterType((*BlockRef)(nil), "dfuse.search.v1.BlockRef")
	proto.RegisterType((*BackendRequest)(nil), "dfuse.search.v1.BackendRequest")
	proto.RegisterType((*RouterRequest)(nil), "dfuse.search.v1.RouterRequest")
	proto.RegisterType((*SearchMatch)(nil), "dfuse.search.v1.SearchMatch")
	proto.RegisterType((*EOSDocumentID)(nil), "dfuse.search.v1.EOSDocumentID")
	proto.RegisterType((*EOSMatch)(nil), "dfuse.search.v1.EOSMatch")
	proto.RegisterType((*EOSBlockTrxPayload)(nil), "dfuse.search.v1.EOSBlockTrxPayload")
	proto.RegisterType((*ETHMatch)(nil), "dfuse.search.v1.ETHMatch")
	proto.RegisterType((*ETHBlockTrxPayload)(nil), "dfuse.search.v1.ETHBlockTrxPayload")
}

func init() {
	proto.RegisterFile("dfuse/search/v1/search.proto", fileDescriptor_5a664997e27fcf00)
}

var fileDescriptor_5a664997e27fcf00 = []byte{
	// 1133 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0x43, 0x89, 0xb6, 0xa8, 0x91, 0xe4, 0xc8, 0xdb, 0xb4, 0xa5, 0x9d, 0xc0, 0x15, 0x98,
	0xa0, 0x10, 0x82, 0x44, 0x4a, 0x54, 0xa0, 0x45, 0x6f, 0xb1, 0x2c, 0x27, 0x96, 0x51, 0x27, 0xc6,
	0x5a, 0xe9, 0xe7, 0x41, 0xa0, 0xc8, 0xb5, 0x48, 0x98, 0xe2, 0xda, 0xcb, 0xa5, 0x62, 0x5f, 0x7b,
	0xea, 0xa5, 0x4f, 0xd2, 0x07, 0xe8, 0xf3, 0xb4, 0x4f, 0xd1, 0x63, 0xb1, 0x43, 0xca, 0xa2, 0x44,
	0xd9, 0x4e, 0x7b, 0x11, 0xb4, 0x33, 0xff, 0xd9, 0x5d, 0xfe, 0x66, 0x76, 0x76, 0xe1, 0x91, 0x7b,
	0x1a, 0x47, 0xac, 0x1d, 0x31, 0x5b, 0x38, 0x5e, 0x7b, 0xfa, 0x32, 0xfd, 0xd7, 0x3a, 0x17, 0x5c,
	0x72, 0x72, 0x1f, 0xbd, 0xad, 0xd4, 0x36, 0x7d, 0xb9, 0x9d, 0xca, 0x1d, 0xee, 0x32, 0x27, 0x6a,
	0xbb, 0x8c, 0x27, 0x3f, 0x89, 0xdc, 0xfa, 0x5b, 0x83, 0xcd, 0x81, 0xb0, 0xc3, 0xc8, 0x76, 0xa4,
	0xcf, 0xc3, 0xbd, 0x58, 0x44, 0x5c, 0x10, 0x13, 0x4a, 0x53, 0x26, 0x22, 0x9f, 0x87, 0xa6, 0xd6,
	0xd0, 0x9a, 0x35, 0x3a, 0x1b, 0x92, 0x87, 0x50, 0x1e, 0x05, 0xdc, 0x39, 0x1b, 0x86, 0xf1, 0xc4,
	0x2c, 0x34, 0xb4, 0xa6, 0x4e, 0x0d, 0x34, 0xbc, 0x8d, 0x27, 0x64, 0x0b, 0x92, 0xff, 0x43, 0xdf,
	0x35, 0x8b, 0x0d, 0xad, 0x59, 0xa5, 0x25, 0x1c, 0xf7, 0x5d, 0xf2, 0x35, 0x7c, 0x2e, 0xe7, 0xcb,
	0x0c, 0x3d, 0x3b, 0xf2, 0x86, 0xe7, 0x82, 0x9d, 0xfa, 0x97, 0xe6, 0x1a, 0x2a, 0x3f, 0xcd, 0xb8,
	0x0f, 0xec, 0xc8, 0x3b, 0x46, 0x27, 0xd9, 0x83, 0x9d, 0x6c, 0x9c, 0x1f, 0xba, 0xec, 0x72, 0xf8,
	0xc1, 0x97, 0x9e, 0x1f, 0x0e, 0x71, 0x6e, 0x73, 0xbd, 0xa1, 0x35, 0x8b, 0xf4, 0x61, 0x46, 0xd5,
	0x57, 0xa2, 0x1f, 0x50, 0xd3, 0x55, 0x12, 0x8b, 0x03, 0x79, 0xcd, 0xc5, 0x19, 0x65, 0x11, 0x0f,
	0xa6, 0x8c, 0xb2, 0x8b, 0x98, 0x45, 0x92, 0x3c, 0x80, 0xb5, 0x8b, 0x98, 0x89, 0x2b, 0xfc, 0xc4,
	0x32, 0x4d, 0x06, 0x64, 0x0f, 0xee, 0x9f, 0x72, 0x71, 0xc6, 0x5c, 0x0c, 0xa5, 0xec, 0x34, 0x32,
	0x0b, 0x8d, 0x62, 0xb3, 0xd2, 0xd9, 0x6a, 0x2d, 0x91, 0x6d, 0xcd, 0x14, 0x74, 0x39, 0xc2, 0x7a,
	0x05, 0xc6, 0x6c, 0x40, 0xb6, 0xe1, 0x1a, 0x10, 0xae, 0x94, 0x05, 0x66, 0x42, 0x0a, 0xa8, 0x87,
	0x2c, 0xcb, 0x33, 0x5e, 0x3d, 0xeb, 0x9f, 0x02, 0x6c, 0x74, 0x6d, 0xe7, 0x8c, 0x85, 0xee, 0xed,
	0xfb, 0x6d, 0x40, 0x25, 0xe0, 0x1f, 0xba, 0xb3, 0x15, 0x92, 0x94, 0x64, 0x4d, 0xc4, 0x82, 0xaa,
	0xe7, 0x8f, 0xbd, 0x6b, 0x49, 0x11, 0x25, 0x0b, 0x36, 0xb2, 0x03, 0xe0, 0xb2, 0xc8, 0x61, 0xa1,
	0xeb, 0x87, 0x63, 0x53, 0x6f, 0x68, 0x4d, 0x83, 0x66, 0x2c, 0xe4, 0x4b, 0xd8, 0x50, 0xd0, 0x29,
	0xc3, 0x3a, 0x18, 0x05, 0x0c, 0xb3, 0x66, 0xd0, 0x25, 0x2b, 0x69, 0x01, 0x09, 0xfc, 0x29, 0x3b,
	0xb2, 0xc5, 0x19, 0x13, 0xfd, 0x50, 0x32, 0x31, 0xb5, 0x03, 0x4c, 0x91, 0x4e, 0x57, 0x78, 0xc8,
	0x33, 0xd8, 0x8c, 0x24, 0x3f, 0xdf, 0x95, 0xdf, 0xfb, 0x42, 0xc6, 0x76, 0x70, 0xc0, 0x6c, 0xd7,
	0x2c, 0xe1, 0xd4, 0x79, 0x07, 0x79, 0x01, 0x9f, 0x84, 0xf6, 0xd4, 0x1f, 0xdb, 0x92, 0xbd, 0x16,
	0x7c, 0xd2, 0x4d, 0xd1, 0x19, 0xc8, 0x63, 0x95, 0x8b, 0x74, 0xe0, 0x41, 0xce, 0xac, 0x18, 0x94,
	0x71, 0x47, 0x2b, 0x7d, 0xd6, 0xaf, 0x6b, 0x50, 0xa3, 0x3c, 0x96, 0x4c, 0xfc, 0x67, 0xf2, 0xc5,
	0xbb, 0xc9, 0x17, 0x97, 0xc8, 0x3f, 0x83, 0xcd, 0x59, 0xc8, 0xfb, 0x70, 0xc4, 0xe3, 0xd0, 0x65,
	0xae, 0x59, 0x4b, 0x08, 0xe4, 0x1c, 0x8a, 0xef, 0x75, 0xf4, 0x5c, 0xbe, 0x81, 0xf2, 0x15, 0x9e,
	0x3b, 0xf3, 0xfa, 0x19, 0xac, 0x3b, 0x78, 0xe4, 0x31, 0x9f, 0x65, 0x9a, 0x8e, 0xc8, 0x2b, 0x28,
	0x0f, 0xc4, 0x65, 0xd2, 0x0d, 0xcc, 0xfb, 0x0d, 0xad, 0x59, 0xe9, 0x58, 0xb9, 0xfa, 0xcf, 0xf5,
	0x0d, 0x3a, 0x0f, 0x52, 0xcc, 0x02, 0x7f, 0xe2, 0xcb, 0xf4, 0x7c, 0x26, 0x83, 0x15, 0x75, 0x54,
	0x5a, 0x59, 0x47, 0xdf, 0x80, 0x3e, 0xe1, 0x2e, 0xc3, 0xd4, 0x6e, 0x74, 0x1e, 0xe7, 0x96, 0x5e,
	0xc8, 0x4f, 0xeb, 0x88, 0xbb, 0x8c, 0x62, 0x80, 0x2a, 0x91, 0x38, 0x62, 0xdf, 0xb1, 0xb1, 0xed,
	0x5c, 0x75, 0x15, 0x04, 0x5b, 0xf8, 0x2c, 0xc2, 0x7c, 0x1b, 0x74, 0x95, 0x4b, 0x21, 0x8a, 0xa4,
	0x2d, 0x24, 0x92, 0x33, 0x01, 0x0b, 0x23, 0x63, 0x51, 0x7e, 0x3c, 0x94, 0x7b, 0x3c, 0x0e, 0xa5,
	0x59, 0x49, 0xfc, 0x73, 0xcb, 0x0d, 0x25, 0x5f, 0xbd, 0xa9, 0xe4, 0xad, 0x27, 0xa0, 0xab, 0xfd,
	0x92, 0x1a, 0x94, 0x4f, 0x06, 0x74, 0x7f, 0xf7, 0xa8, 0xff, 0xf6, 0x4d, 0xfd, 0x9e, 0x1a, 0x1e,
	0xef, 0xbe, 0xe9, 0xbf, 0xdd, 0x1d, 0xec, 0xf7, 0xea, 0x9a, 0xf5, 0x57, 0x01, 0x2a, 0x27, 0xf8,
	0xb9, 0x47, 0xb6, 0x74, 0x3c, 0x55, 0x6c, 0x52, 0x5c, 0xf6, 0xdd, 0xa4, 0x2d, 0xa6, 0x85, 0x98,
	0x35, 0x2d, 0xf4, 0x99, 0xe5, 0xc6, 0xfc, 0x00, 0xd6, 0xb0, 0x73, 0xa6, 0x67, 0x3f, 0x19, 0x64,
	0x92, 0xaf, 0xdf, 0x9c, 0xfc, 0xea, 0xff, 0x49, 0xfe, 0x73, 0x28, 0x32, 0x1e, 0x21, 0xcc, 0x55,
	0x8d, 0x73, 0xff, 0xdd, 0x09, 0x7e, 0xd5, 0xc1, 0x3d, 0xaa, 0x74, 0x28, 0x97, 0x1e, 0xb2, 0x5d,
	0x29, 0x1f, 0x1c, 0xcc, 0xe5, 0xd2, 0x23, 0x04, 0xf4, 0x38, 0x74, 0xb9, 0xb9, 0x85, 0x49, 0xc5,
	0xff, 0x8a, 0x8f, 0x2f, 0xc4, 0xf5, 0x49, 0xdb, 0x4e, 0xda, 0x60, 0xc6, 0xd4, 0x05, 0x30, 0xa2,
	0x73, 0xe6, 0xf8, 0xa7, 0xbe, 0x73, 0xa8, 0x1b, 0xb5, 0xfa, 0x96, 0xf5, 0x87, 0x06, 0xb5, 0xfd,
	0x77, 0x27, 0x3d, 0xee, 0xc4, 0x13, 0x16, 0xca, 0x7e, 0xef, 0xd6, 0x5e, 0xdd, 0x80, 0x4a, 0xe6,
	0x7a, 0x99, 0x35, 0xda, 0x8c, 0x89, 0x3c, 0x85, 0xfa, 0xf2, 0x2d, 0x94, 0x02, 0xcf, 0xd9, 0x55,
	0x9d, 0x66, 0x6d, 0xbd, 0x34, 0xaf, 0x3a, 0xde, 0x85, 0xab, 0x5c, 0xd6, 0x05, 0x18, 0x33, 0x6e,
	0xe4, 0x09, 0xd4, 0x32, 0x93, 0xb1, 0xc8, 0xd4, 0x1a, 0xc5, 0x66, 0x8d, 0x2e, 0x1a, 0xc9, 0xb7,
	0xb0, 0x96, 0x5c, 0x91, 0x06, 0x82, 0x7d, 0xbc, 0x2a, 0x0f, 0x88, 0x67, 0x20, 0x2e, 0x8f, 0xed,
	0xab, 0x80, 0xdb, 0x2e, 0x4d, 0x22, 0x0e, 0x75, 0xa3, 0x50, 0x37, 0xac, 0x3f, 0x35, 0x20, 0x79,
	0x0d, 0x79, 0x05, 0x15, 0x54, 0xa9, 0x9e, 0xcc, 0x04, 0x82, 0xaa, 0x74, 0x76, 0xd2, 0xd9, 0x93,
	0x77, 0x46, 0x0b, 0x9f, 0x18, 0xdd, 0xb9, 0x8a, 0x66, 0x43, 0x6e, 0xbe, 0xf7, 0xd4, 0x9e, 0xa5,
	0xb0, 0x1d, 0x86, 0x6d, 0x63, 0xbe, 0xe7, 0xec, 0xac, 0x99, 0xca, 0x1b, 0x28, 0x29, 0x4d, 0x22,
	0x0e, 0x75, 0xa3, 0x58, 0x5f, 0x3f, 0xd4, 0x8d, 0x52, 0xbd, 0x6a, 0xfd, 0xae, 0x81, 0x31, 0x2b,
	0x1b, 0x95, 0x39, 0xc7, 0x0e, 0x82, 0x45, 0x56, 0x59, 0x93, 0x3a, 0xe3, 0x01, 0x1f, 0xcf, 0x04,
	0x05, 0x14, 0x64, 0x2c, 0x1f, 0x41, 0x72, 0x70, 0x70, 0x23, 0xc9, 0x62, 0xdd, 0xb0, 0x7e, 0x53,
	0x24, 0x73, 0x1a, 0xb5, 0xb3, 0x65, 0x92, 0xd5, 0x8f, 0x25, 0x95, 0xad, 0xd5, 0x62, 0xfe, 0xbc,
	0x27, 0x14, 0x01, 0x67, 0xbc, 0x06, 0xa4, 0xd7, 0xa1, 0xf3, 0x0b, 0x94, 0xd2, 0x87, 0x05, 0x39,
	0x86, 0xda, 0x89, 0x14, 0xcc, 0x9e, 0x20, 0x27, 0x16, 0x91, 0x2f, 0xf2, 0x6f, 0x9c, 0x85, 0x37,
	0xc8, 0xf6, 0xa3, 0x9c, 0x20, 0xd3, 0xa4, 0x5e, 0x68, 0x9d, 0x9f, 0x60, 0x3d, 0x69, 0xcd, 0xe4,
	0xdd, 0xf2, 0xdc, 0x3b, 0xb7, 0x37, 0xf1, 0x3b, 0xa7, 0xf6, 0xa0, 0x9a, 0x79, 0xc4, 0x09, 0xf2,
	0x23, 0x6c, 0x26, 0x0b, 0xbc, 0x0f, 0x5d, 0x3e, 0x5b, 0x24, 0x9f, 0x99, 0xfc, 0xc3, 0xef, 0xae,
	0x95, 0xba, 0x4f, 0x7f, 0x6e, 0x8e, 0x7d, 0xe9, 0xc5, 0xa3, 0x96, 0xc3, 0x27, 0x6d, 0xd4, 0x3e,
	0xf7, 0x79, 0xfb, 0x7c, 0x34, 0xe6, 0xed, 0xa5, 0xb7, 0xf7, 0x68, 0x1d, 0x9f, 0xd1, 0x5f, 0xfd,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x40, 0x00, 0x8a, 0xc5, 0x95, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BackendClient interface {
	StreamMatches(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (Backend_StreamMatchesClient, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) StreamMatches(ctx context.Context, in *BackendRequest, opts ...grpc.CallOption) (Backend_StreamMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Backend_serviceDesc.Streams[0], "/dfuse.search.v1.Backend/StreamMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendStreamMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Backend_StreamMatchesClient interface {
	Recv() (*SearchMatch, error)
	grpc.ClientStream
}

type backendStreamMatchesClient struct {
	grpc.ClientStream
}

func (x *backendStreamMatchesClient) Recv() (*SearchMatch, error) {
	m := new(SearchMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServer is the server API for Backend service.
type BackendServer interface {
	StreamMatches(*BackendRequest, Backend_StreamMatchesServer) error
}

// UnimplementedBackendServer can be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (*UnimplementedBackendServer) StreamMatches(req *BackendRequest, srv Backend_StreamMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatches not implemented")
}

func RegisterBackendServer(s *grpc.Server, srv BackendServer) {
	s.RegisterService(&_Backend_serviceDesc, srv)
}

func _Backend_StreamMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BackendRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServer).StreamMatches(m, &backendStreamMatchesServer{stream})
}

type Backend_StreamMatchesServer interface {
	Send(*SearchMatch) error
	grpc.ServerStream
}

type backendStreamMatchesServer struct {
	grpc.ServerStream
}

func (x *backendStreamMatchesServer) Send(m *SearchMatch) error {
	return x.ServerStream.SendMsg(m)
}

var _Backend_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.search.v1.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatches",
			Handler:       _Backend_StreamMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/search/v1/search.proto",
}

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RouterClient interface {
	StreamMatches(ctx context.Context, in *RouterRequest, opts ...grpc.CallOption) (Router_StreamMatchesClient, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) StreamMatches(ctx context.Context, in *RouterRequest, opts ...grpc.CallOption) (Router_StreamMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Router_serviceDesc.Streams[0], "/dfuse.search.v1.Router/StreamMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &routerStreamMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Router_StreamMatchesClient interface {
	Recv() (*SearchMatch, error)
	grpc.ClientStream
}

type routerStreamMatchesClient struct {
	grpc.ClientStream
}

func (x *routerStreamMatchesClient) Recv() (*SearchMatch, error) {
	m := new(SearchMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RouterServer is the server API for Router service.
type RouterServer interface {
	StreamMatches(*RouterRequest, Router_StreamMatchesServer) error
}

// UnimplementedRouterServer can be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (*UnimplementedRouterServer) StreamMatches(req *RouterRequest, srv Router_StreamMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMatches not implemented")
}

func RegisterRouterServer(s *grpc.Server, srv RouterServer) {
	s.RegisterService(&_Router_serviceDesc, srv)
}

func _Router_StreamMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RouterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RouterServer).StreamMatches(m, &routerStreamMatchesServer{stream})
}

type Router_StreamMatchesServer interface {
	Send(*SearchMatch) error
	grpc.ServerStream
}

type routerStreamMatchesServer struct {
	grpc.ServerStream
}

func (x *routerStreamMatchesServer) Send(m *SearchMatch) error {
	return x.ServerStream.SendMsg(m)
}

var _Router_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.search.v1.Router",
	HandlerType: (*RouterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMatches",
			Handler:       _Router_StreamMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/search/v1/search.proto",
}

// ForkResolverClient is the client API for ForkResolver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForkResolverClient interface {
	StreamUndoMatches(ctx context.Context, in *ForkResolveRequest, opts ...grpc.CallOption) (ForkResolver_StreamUndoMatchesClient, error)
}

type forkResolverClient struct {
	cc grpc.ClientConnInterface
}

func NewForkResolverClient(cc grpc.ClientConnInterface) ForkResolverClient {
	return &forkResolverClient{cc}
}

func (c *forkResolverClient) StreamUndoMatches(ctx context.Context, in *ForkResolveRequest, opts ...grpc.CallOption) (ForkResolver_StreamUndoMatchesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ForkResolver_serviceDesc.Streams[0], "/dfuse.search.v1.ForkResolver/StreamUndoMatches", opts...)
	if err != nil {
		return nil, err
	}
	x := &forkResolverStreamUndoMatchesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ForkResolver_StreamUndoMatchesClient interface {
	Recv() (*SearchMatch, error)
	grpc.ClientStream
}

type forkResolverStreamUndoMatchesClient struct {
	grpc.ClientStream
}

func (x *forkResolverStreamUndoMatchesClient) Recv() (*SearchMatch, error) {
	m := new(SearchMatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ForkResolverServer is the server API for ForkResolver service.
type ForkResolverServer interface {
	StreamUndoMatches(*ForkResolveRequest, ForkResolver_StreamUndoMatchesServer) error
}

// UnimplementedForkResolverServer can be embedded to have forward compatible implementations.
type UnimplementedForkResolverServer struct {
}

func (*UnimplementedForkResolverServer) StreamUndoMatches(req *ForkResolveRequest, srv ForkResolver_StreamUndoMatchesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUndoMatches not implemented")
}

func RegisterForkResolverServer(s *grpc.Server, srv ForkResolverServer) {
	s.RegisterService(&_ForkResolver_serviceDesc, srv)
}

func _ForkResolver_StreamUndoMatches_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ForkResolveRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ForkResolverServer).StreamUndoMatches(m, &forkResolverStreamUndoMatchesServer{stream})
}

type ForkResolver_StreamUndoMatchesServer interface {
	Send(*SearchMatch) error
	grpc.ServerStream
}

type forkResolverStreamUndoMatchesServer struct {
	grpc.ServerStream
}

func (x *forkResolverStreamUndoMatchesServer) Send(m *SearchMatch) error {
	return x.ServerStream.SendMsg(m)
}

var _ForkResolver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.search.v1.ForkResolver",
	HandlerType: (*ForkResolverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUndoMatches",
			Handler:       _ForkResolver_StreamUndoMatches_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/search/v1/search.proto",
}
