// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfuse/bstream/v1/bstream.proto

package pbbstream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ForkStep int32

const (
	ForkStep_STEP_UNKNOWN      ForkStep = 0
	ForkStep_STEP_NEW          ForkStep = 1
	ForkStep_STEP_UNDO         ForkStep = 2
	ForkStep_STEP_IRREVERSIBLE ForkStep = 4
)

var ForkStep_name = map[int32]string{
	0: "STEP_UNKNOWN",
	1: "STEP_NEW",
	2: "STEP_UNDO",
	4: "STEP_IRREVERSIBLE",
}

var ForkStep_value = map[string]int32{
	"STEP_UNKNOWN":      0,
	"STEP_NEW":          1,
	"STEP_UNDO":         2,
	"STEP_IRREVERSIBLE": 4,
}

func (x ForkStep) String() string {
	return proto.EnumName(ForkStep_name, int32(x))
}

func (ForkStep) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{0}
}

type BlockDetails int32

const (
	BlockDetails_BLOCK_DETAILS_FULL  BlockDetails = 0
	BlockDetails_BLOCK_DETAILS_LIGHT BlockDetails = 1
)

var BlockDetails_name = map[int32]string{
	0: "BLOCK_DETAILS_FULL",
	1: "BLOCK_DETAILS_LIGHT",
}

var BlockDetails_value = map[string]int32{
	"BLOCK_DETAILS_FULL":  0,
	"BLOCK_DETAILS_LIGHT": 1,
}

func (x BlockDetails) String() string {
	return proto.EnumName(BlockDetails_name, int32(x))
}

func (BlockDetails) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{1}
}

type Protocol int32

const (
	Protocol_UNKNOWN Protocol = 0
	Protocol_EOS     Protocol = 1
	Protocol_ETH     Protocol = 2
)

var Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "EOS",
	2: "ETH",
}

var Protocol_value = map[string]int32{
	"UNKNOWN": 0,
	"EOS":     1,
	"ETH":     2,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{2}
}

// Whether we can assume the data will come ordered, unless there is a chain reorganization.
// mindreaders output ordered data, whereas relayers can output unordered data.
// The server can fail early if the assumption of the caller cannot be fulfilled.
type BlockRequest_Order int32

const (
	BlockRequest_UNSPECIFIED BlockRequest_Order = 0
	BlockRequest_ORDERED     BlockRequest_Order = 1
	BlockRequest_UNORDERED   BlockRequest_Order = 2
)

var BlockRequest_Order_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ORDERED",
	2: "UNORDERED",
}

var BlockRequest_Order_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ORDERED":     1,
	"UNORDERED":   2,
}

func (x BlockRequest_Order) String() string {
	return proto.EnumName(BlockRequest_Order_name, int32(x))
}

func (BlockRequest_Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{0, 0}
}

type BlockRequest struct {
	// Number of blocks we want to get in burst upon connection, on a best effort basis.
	Burst int64 `protobuf:"varint,1,opt,name=burst,proto3" json:"burst,omitempty"`
	// Type of blocks we're after here, is it 'ethereum' data, 'eos', etc.. The server can fail early
	// if he doesn't match the data he serves (services mismatch, etc..)
	ContentType          string             `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Order                BlockRequest_Order `protobuf:"varint,3,opt,name=order,proto3,enum=dfuse.bstream.v1.BlockRequest_Order" json:"order,omitempty"`
	Requester            string             `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{0}
}

func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetBurst() int64 {
	if m != nil {
		return m.Burst
	}
	return 0
}

func (m *BlockRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *BlockRequest) GetOrder() BlockRequest_Order {
	if m != nil {
		return m.Order
	}
	return BlockRequest_UNSPECIFIED
}

func (m *BlockRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

type IrreversibleBlocksRequestV2 struct {
	StartBlockNum        int64    `protobuf:"varint,1,opt,name=start_block_num,json=startBlockNum,proto3" json:"start_block_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IrreversibleBlocksRequestV2) Reset()         { *m = IrreversibleBlocksRequestV2{} }
func (m *IrreversibleBlocksRequestV2) String() string { return proto.CompactTextString(m) }
func (*IrreversibleBlocksRequestV2) ProtoMessage()    {}
func (*IrreversibleBlocksRequestV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{1}
}

func (m *IrreversibleBlocksRequestV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IrreversibleBlocksRequestV2.Unmarshal(m, b)
}
func (m *IrreversibleBlocksRequestV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IrreversibleBlocksRequestV2.Marshal(b, m, deterministic)
}
func (m *IrreversibleBlocksRequestV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IrreversibleBlocksRequestV2.Merge(m, src)
}
func (m *IrreversibleBlocksRequestV2) XXX_Size() int {
	return xxx_messageInfo_IrreversibleBlocksRequestV2.Size(m)
}
func (m *IrreversibleBlocksRequestV2) XXX_DiscardUnknown() {
	xxx_messageInfo_IrreversibleBlocksRequestV2.DiscardUnknown(m)
}

var xxx_messageInfo_IrreversibleBlocksRequestV2 proto.InternalMessageInfo

func (m *IrreversibleBlocksRequestV2) GetStartBlockNum() int64 {
	if m != nil {
		return m.StartBlockNum
	}
	return 0
}

// For historical segments, forks are not passed
type BlocksRequestV2 struct {
	// Controls where the stream of blocks will start.
	//
	// The stream will start **inclusively** at the requested block num.
	//
	// When not provided, starts at first streamable block of the chain. Not all
	// chain starts at the same block number, so you might get an higher block than
	// requested when using default value of 0.
	//
	// Can be negative, will be resolved relative to the chain head block, assuming
	// a chain at head block #100, then using `-50` as the value will start at block
	// #50. If it resolves before first streamable block of chain, we assume start
	// of chain.
	//
	// If `start_cursor` is passed, this value is ignored and the stream instead starts
	// immediately after the Block pointed by the opaque `start_cursor` value.
	StartBlockNum int64 `protobuf:"varint,1,opt,name=start_block_num,json=startBlockNum,proto3" json:"start_block_num,omitempty"`
	// Controls where the stream of blocks will start which will be immediately after
	// the Block pointed by this opaque cursor.
	//
	// Obtain this value from a previously received BlockResponseV2.cursor.
	//
	// This value takes precedence over `start_block_num`.
	StartCursor string `protobuf:"bytes,13,opt,name=start_cursor,json=startCursor,proto3" json:"start_cursor,omitempty"`
	// When non-zero, controls where the stream of blocks will stop.
	//
	// The stream will close **after** that block has passed so the boundary is
	// **inclusive**.
	StopBlockNum uint64 `protobuf:"varint,5,opt,name=stop_block_num,json=stopBlockNum,proto3" json:"stop_block_num,omitempty"`
	// Filter the steps you want to see. If not specified, defaults to all steps.
	//
	// Most common steps will be [STEP_IRREVERSIBLE], or [STEP_NEW, STEP_UNDO, STEP_IRREVERSIBLE].
	ForkSteps []ForkStep `protobuf:"varint,8,rep,packed,name=fork_steps,json=forkSteps,proto3,enum=dfuse.bstream.v1.ForkStep" json:"fork_steps,omitempty"`
	// The CEL filter expression used to include transactions, specific to the target protocol,
	// works in combination with `exclude_filter_expr` value.
	IncludeFilterExpr string `protobuf:"bytes,10,opt,name=include_filter_expr,json=includeFilterExpr,proto3" json:"include_filter_expr,omitempty"`
	// The CEL filter expression used to exclude transactions, specific to the target protocol, works
	// in combination with `include_filter_expr` value.
	ExcludeFilterExpr string `protobuf:"bytes,11,opt,name=exclude_filter_expr,json=excludeFilterExpr,proto3" json:"exclude_filter_expr,omitempty"`
	// **Warning** Experimental API, controls how blocks are trimmed for extraneous information before
	// being sent back. The actual trimming is chain dependent.
	Details              BlockDetails `protobuf:"varint,15,opt,name=details,proto3,enum=dfuse.bstream.v1.BlockDetails" json:"details,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *BlocksRequestV2) Reset()         { *m = BlocksRequestV2{} }
func (m *BlocksRequestV2) String() string { return proto.CompactTextString(m) }
func (*BlocksRequestV2) ProtoMessage()    {}
func (*BlocksRequestV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{2}
}

func (m *BlocksRequestV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlocksRequestV2.Unmarshal(m, b)
}
func (m *BlocksRequestV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlocksRequestV2.Marshal(b, m, deterministic)
}
func (m *BlocksRequestV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlocksRequestV2.Merge(m, src)
}
func (m *BlocksRequestV2) XXX_Size() int {
	return xxx_messageInfo_BlocksRequestV2.Size(m)
}
func (m *BlocksRequestV2) XXX_DiscardUnknown() {
	xxx_messageInfo_BlocksRequestV2.DiscardUnknown(m)
}

var xxx_messageInfo_BlocksRequestV2 proto.InternalMessageInfo

func (m *BlocksRequestV2) GetStartBlockNum() int64 {
	if m != nil {
		return m.StartBlockNum
	}
	return 0
}

func (m *BlocksRequestV2) GetStartCursor() string {
	if m != nil {
		return m.StartCursor
	}
	return ""
}

func (m *BlocksRequestV2) GetStopBlockNum() uint64 {
	if m != nil {
		return m.StopBlockNum
	}
	return 0
}

func (m *BlocksRequestV2) GetForkSteps() []ForkStep {
	if m != nil {
		return m.ForkSteps
	}
	return nil
}

func (m *BlocksRequestV2) GetIncludeFilterExpr() string {
	if m != nil {
		return m.IncludeFilterExpr
	}
	return ""
}

func (m *BlocksRequestV2) GetExcludeFilterExpr() string {
	if m != nil {
		return m.ExcludeFilterExpr
	}
	return ""
}

func (m *BlocksRequestV2) GetDetails() BlockDetails {
	if m != nil {
		return m.Details
	}
	return BlockDetails_BLOCK_DETAILS_FULL
}

type BlockResponseV2 struct {
	// Chain specific block payload, one of:
	//  - dfuse.ethereum.codec.v1.Block
	//  - dfuse.eosio.codec.v1.Block
	Block                *any.Any `protobuf:"bytes,1,opt,name=block,proto3" json:"block,omitempty"`
	Step                 ForkStep `protobuf:"varint,6,opt,name=step,proto3,enum=dfuse.bstream.v1.ForkStep" json:"step,omitempty"`
	Cursor               string   `protobuf:"bytes,10,opt,name=cursor,proto3" json:"cursor,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockResponseV2) Reset()         { *m = BlockResponseV2{} }
func (m *BlockResponseV2) String() string { return proto.CompactTextString(m) }
func (*BlockResponseV2) ProtoMessage()    {}
func (*BlockResponseV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{3}
}

func (m *BlockResponseV2) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockResponseV2.Unmarshal(m, b)
}
func (m *BlockResponseV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockResponseV2.Marshal(b, m, deterministic)
}
func (m *BlockResponseV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockResponseV2.Merge(m, src)
}
func (m *BlockResponseV2) XXX_Size() int {
	return xxx_messageInfo_BlockResponseV2.Size(m)
}
func (m *BlockResponseV2) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockResponseV2.DiscardUnknown(m)
}

var xxx_messageInfo_BlockResponseV2 proto.InternalMessageInfo

func (m *BlockResponseV2) GetBlock() *any.Any {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *BlockResponseV2) GetStep() ForkStep {
	if m != nil {
		return m.Step
	}
	return ForkStep_STEP_UNKNOWN
}

func (m *BlockResponseV2) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

type Cursor struct {
	BlockId              string   `protobuf:"bytes,1,opt,name=block_id,json=blockId,proto3" json:"block_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cursor) Reset()         { *m = Cursor{} }
func (m *Cursor) String() string { return proto.CompactTextString(m) }
func (*Cursor) ProtoMessage()    {}
func (*Cursor) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{4}
}

func (m *Cursor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cursor.Unmarshal(m, b)
}
func (m *Cursor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cursor.Marshal(b, m, deterministic)
}
func (m *Cursor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cursor.Merge(m, src)
}
func (m *Cursor) XXX_Size() int {
	return xxx_messageInfo_Cursor.Size(m)
}
func (m *Cursor) XXX_DiscardUnknown() {
	xxx_messageInfo_Cursor.DiscardUnknown(m)
}

var xxx_messageInfo_Cursor proto.InternalMessageInfo

func (m *Cursor) GetBlockId() string {
	if m != nil {
		return m.BlockId
	}
	return ""
}

type Block struct {
	Number               uint64               `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PreviousId           string               `protobuf:"bytes,3,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LibNum               uint64               `protobuf:"varint,5,opt,name=lib_num,json=libNum,proto3" json:"lib_num,omitempty"`
	PayloadKind          Protocol             `protobuf:"varint,6,opt,name=payload_kind,json=payloadKind,proto3,enum=dfuse.bstream.v1.Protocol" json:"payload_kind,omitempty"`
	PayloadVersion       int32                `protobuf:"varint,7,opt,name=payload_version,json=payloadVersion,proto3" json:"payload_version,omitempty"`
	PayloadBuffer        []byte               `protobuf:"bytes,8,opt,name=payload_buffer,json=payloadBuffer,proto3" json:"payload_buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{5}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block) GetPreviousId() string {
	if m != nil {
		return m.PreviousId
	}
	return ""
}

func (m *Block) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetLibNum() uint64 {
	if m != nil {
		return m.LibNum
	}
	return 0
}

func (m *Block) GetPayloadKind() Protocol {
	if m != nil {
		return m.PayloadKind
	}
	return Protocol_UNKNOWN
}

func (m *Block) GetPayloadVersion() int32 {
	if m != nil {
		return m.PayloadVersion
	}
	return 0
}

func (m *Block) GetPayloadBuffer() []byte {
	if m != nil {
		return m.PayloadBuffer
	}
	return nil
}

type BlockRef struct {
	Num                  uint64   `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlockRef) Reset()         { *m = BlockRef{} }
func (m *BlockRef) String() string { return proto.CompactTextString(m) }
func (*BlockRef) ProtoMessage()    {}
func (*BlockRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{6}
}

func (m *BlockRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRef.Unmarshal(m, b)
}
func (m *BlockRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRef.Marshal(b, m, deterministic)
}
func (m *BlockRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRef.Merge(m, src)
}
func (m *BlockRef) XXX_Size() int {
	return xxx_messageInfo_BlockRef.Size(m)
}
func (m *BlockRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRef.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRef proto.InternalMessageInfo

func (m *BlockRef) GetNum() uint64 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *BlockRef) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("dfuse.bstream.v1.ForkStep", ForkStep_name, ForkStep_value)
	proto.RegisterEnum("dfuse.bstream.v1.BlockDetails", BlockDetails_name, BlockDetails_value)
	proto.RegisterEnum("dfuse.bstream.v1.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("dfuse.bstream.v1.BlockRequest_Order", BlockRequest_Order_name, BlockRequest_Order_value)
	proto.RegisterType((*BlockRequest)(nil), "dfuse.bstream.v1.BlockRequest")
	proto.RegisterType((*IrreversibleBlocksRequestV2)(nil), "dfuse.bstream.v1.IrreversibleBlocksRequestV2")
	proto.RegisterType((*BlocksRequestV2)(nil), "dfuse.bstream.v1.BlocksRequestV2")
	proto.RegisterType((*BlockResponseV2)(nil), "dfuse.bstream.v1.BlockResponseV2")
	proto.RegisterType((*Cursor)(nil), "dfuse.bstream.v1.Cursor")
	proto.RegisterType((*Block)(nil), "dfuse.bstream.v1.Block")
	proto.RegisterType((*BlockRef)(nil), "dfuse.bstream.v1.BlockRef")
}

func init() { proto.RegisterFile("dfuse/bstream/v1/bstream.proto", fileDescriptor_9cfb17be2e7d1b7d) }

var fileDescriptor_9cfb17be2e7d1b7d = []byte{
	// 878 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xff, 0x6e, 0xdb, 0x36,
	0x10, 0x8e, 0xfc, 0x53, 0x3e, 0x39, 0xb6, 0xca, 0x76, 0x8d, 0xea, 0x0d, 0xa9, 0xa3, 0x75, 0x9b,
	0x17, 0x6c, 0x72, 0xab, 0x6e, 0x40, 0xb7, 0x61, 0x18, 0xea, 0x58, 0x59, 0x85, 0x18, 0x76, 0x40,
	0x3b, 0x2e, 0x30, 0x0c, 0x10, 0x2c, 0x8b, 0xce, 0x84, 0xc8, 0xa2, 0x46, 0x49, 0x41, 0xfc, 0x00,
	0x7b, 0xa1, 0xbd, 0x4c, 0x5f, 0x67, 0x10, 0x45, 0x25, 0x5e, 0x02, 0xf7, 0x8f, 0xfe, 0xc7, 0xfb,
	0xee, 0xbb, 0x3b, 0xea, 0xbb, 0x3b, 0x0a, 0x0e, 0xbd, 0x55, 0x1a, 0x93, 0xbe, 0x1b, 0x27, 0x8c,
	0x2c, 0xd6, 0xfd, 0xeb, 0x57, 0xc5, 0xd1, 0x88, 0x18, 0x4d, 0x28, 0x52, 0xb9, 0xdf, 0x28, 0xc0,
	0xeb, 0x57, 0x9d, 0xe7, 0x97, 0x94, 0x5e, 0x06, 0xa4, 0xcf, 0xfd, 0x6e, 0xba, 0xea, 0x27, 0xfe,
	0x9a, 0xc4, 0xc9, 0x62, 0x1d, 0xe5, 0x21, 0x9d, 0x67, 0xf7, 0x09, 0x8b, 0x70, 0x93, 0xbb, 0xf4,
	0x0f, 0x12, 0x34, 0x07, 0x01, 0x5d, 0x5e, 0x61, 0xf2, 0x77, 0x4a, 0xe2, 0x04, 0x3d, 0x81, 0xaa,
	0x9b, 0xb2, 0x38, 0xd1, 0xa4, 0xae, 0xd4, 0x2b, 0xe3, 0xdc, 0x40, 0x47, 0xd0, 0x5c, 0xd2, 0x30,
	0x21, 0x61, 0xe2, 0x24, 0x9b, 0x88, 0x68, 0xa5, 0xae, 0xd4, 0x6b, 0x60, 0x45, 0x60, 0xb3, 0x4d,
	0x44, 0xd0, 0xcf, 0x50, 0xa5, 0xcc, 0x23, 0x4c, 0x2b, 0x77, 0xa5, 0x5e, 0xcb, 0x7c, 0x61, 0xdc,
	0xbf, 0xa7, 0xb1, 0x5d, 0xc7, 0x98, 0x64, 0x5c, 0x9c, 0x87, 0xa0, 0x2f, 0xa0, 0xc1, 0x72, 0x9c,
	0x30, 0xad, 0xc2, 0x73, 0xdf, 0x01, 0xfa, 0x0f, 0x50, 0xe5, 0x6c, 0xd4, 0x06, 0xe5, 0x62, 0x3c,
	0x3d, 0xb7, 0x4e, 0xec, 0x53, 0xdb, 0x1a, 0xaa, 0x7b, 0x48, 0x81, 0xfa, 0x04, 0x0f, 0x2d, 0x6c,
	0x0d, 0x55, 0x09, 0xed, 0x43, 0xe3, 0x62, 0x5c, 0x98, 0x25, 0xdd, 0x82, 0xcf, 0x6d, 0xc6, 0xc8,
	0x35, 0x61, 0xb1, 0xef, 0x06, 0x84, 0x17, 0x8f, 0x45, 0xf5, 0xb9, 0x89, 0xbe, 0x86, 0x76, 0x9c,
	0x2c, 0x58, 0xe2, 0xb8, 0x99, 0xc3, 0x09, 0xd3, 0xb5, 0xf8, 0xe2, 0x7d, 0x0e, 0x73, 0xfa, 0x38,
	0x5d, 0xeb, 0x1f, 0x4a, 0xd0, 0xfe, 0xc4, 0xd8, 0x4c, 0xb5, 0x9c, 0xb7, 0x4c, 0x59, 0x4c, 0x99,
	0xb6, 0x9f, 0xab, 0xc6, 0xb1, 0x13, 0x0e, 0xa1, 0x17, 0xd0, 0x8a, 0x13, 0x1a, 0x6d, 0x65, 0xaa,
	0x76, 0xa5, 0x5e, 0x05, 0x37, 0x33, 0xf4, 0x36, 0xd1, 0x4f, 0x00, 0x2b, 0xca, 0xae, 0x9c, 0x38,
	0x21, 0x51, 0xac, 0xc9, 0xdd, 0x72, 0xaf, 0x65, 0x76, 0x1e, 0x0a, 0x7c, 0x4a, 0xd9, 0xd5, 0x34,
	0x21, 0x11, 0x6e, 0xac, 0xc4, 0x29, 0x46, 0x06, 0x3c, 0xf6, 0xc3, 0x65, 0x90, 0x7a, 0xc4, 0x59,
	0xf9, 0x41, 0x42, 0x98, 0x43, 0x6e, 0x22, 0xa6, 0x01, 0xbf, 0xca, 0x23, 0xe1, 0x3a, 0xe5, 0x1e,
	0xeb, 0x26, 0x62, 0x19, 0x9f, 0xdc, 0x3c, 0xe4, 0x2b, 0x39, 0x5f, 0xb8, 0xb6, 0xf8, 0x6f, 0xa0,
	0xee, 0x91, 0x64, 0xe1, 0x07, 0xb1, 0xd6, 0xe6, 0x8d, 0x3f, 0xdc, 0xd1, 0xf8, 0x61, 0xce, 0xc2,
	0x05, 0x5d, 0xff, 0x47, 0x12, 0xca, 0x62, 0x12, 0x47, 0x34, 0x8c, 0xc9, 0xdc, 0x44, 0xc7, 0x50,
	0xe5, 0x4a, 0x70, 0x3d, 0x15, 0xf3, 0x89, 0x91, 0x4f, 0xae, 0x51, 0x4c, 0xae, 0xf1, 0x36, 0xdc,
	0xe0, 0x9c, 0x82, 0x0c, 0xa8, 0x64, 0x7a, 0x68, 0x35, 0x5e, 0xf6, 0x63, 0x72, 0x70, 0x1e, 0x7a,
	0x0a, 0x35, 0xd1, 0x87, 0xfc, 0xe3, 0x85, 0xa5, 0x7f, 0x09, 0x35, 0xd1, 0x8c, 0x67, 0x20, 0xe7,
	0x7d, 0xf0, 0x3d, 0x7e, 0x81, 0x06, 0xae, 0x73, 0xdb, 0xf6, 0xf4, 0x7f, 0x4b, 0x50, 0xe5, 0x97,
	0xcd, 0xd2, 0x84, 0xe9, 0xda, 0x25, 0x8c, 0x53, 0x2a, 0x58, 0x58, 0xa8, 0x05, 0x25, 0xdf, 0x13,
	0x8b, 0x51, 0xf2, 0x3d, 0xf4, 0x1c, 0x94, 0x88, 0x91, 0x6b, 0x9f, 0xa6, 0x71, 0x96, 0xaf, 0xcc,
	0x1d, 0x50, 0x40, 0xb6, 0x87, 0xde, 0x40, 0xe3, 0x76, 0x51, 0xf9, 0xd0, 0x2b, 0x66, 0xe7, 0xc1,
	0xf7, 0xce, 0x0a, 0x06, 0xbe, 0x23, 0xa3, 0x03, 0xa8, 0x07, 0xbe, 0xbb, 0x35, 0x2d, 0xb5, 0xc0,
	0x77, 0xb3, 0x39, 0xf9, 0x15, 0x9a, 0xd1, 0x62, 0x13, 0xd0, 0x85, 0xe7, 0x5c, 0xf9, 0xa1, 0xb7,
	0x5b, 0x9a, 0xf3, 0x2c, 0xff, 0x92, 0x06, 0x58, 0x11, 0xfc, 0x33, 0x3f, 0xf4, 0xd0, 0x37, 0xd0,
	0x2e, 0xc2, 0xf9, 0xda, 0xd0, 0x50, 0xab, 0x77, 0xa5, 0x5e, 0x15, 0xb7, 0x04, 0x3c, 0xcf, 0x51,
	0xf4, 0x15, 0x14, 0x88, 0xe3, 0xa6, 0xab, 0x15, 0x61, 0x9a, 0xdc, 0x95, 0x7a, 0x4d, 0xbc, 0x2f,
	0xd0, 0x01, 0x07, 0xf5, 0xef, 0x40, 0x16, 0x0d, 0x5e, 0x21, 0x15, 0xca, 0xc5, 0x9e, 0x54, 0x70,
	0x76, 0xbc, 0x2f, 0xd8, 0xf1, 0x9f, 0x20, 0x17, 0x1d, 0x43, 0x2a, 0x34, 0xa7, 0x33, 0xeb, 0xdc,
	0xb9, 0x18, 0x9f, 0x8d, 0x27, 0xef, 0xc7, 0xea, 0x1e, 0x6a, 0x82, 0xcc, 0x91, 0xb1, 0xf5, 0x3e,
	0xdf, 0x75, 0xe1, 0x1f, 0x4e, 0xd4, 0x12, 0xfa, 0x0c, 0x1e, 0x71, 0xd3, 0xc6, 0xd8, 0x9a, 0x5b,
	0x78, 0x6a, 0x0f, 0x46, 0x96, 0x5a, 0xd1, 0x2b, 0x72, 0x59, 0x2d, 0xeb, 0x15, 0xb9, 0xaa, 0x56,
	0x8f, 0x7f, 0x13, 0xef, 0x9c, 0x18, 0x43, 0xf4, 0x14, 0xd0, 0x60, 0x34, 0x39, 0x39, 0x73, 0x86,
	0xd6, 0xec, 0xad, 0x3d, 0x9a, 0x3a, 0xa7, 0x17, 0xa3, 0x91, 0xba, 0x87, 0x0e, 0xe0, 0xf1, 0xff,
	0xf1, 0x91, 0xfd, 0xfb, 0xbb, 0x99, 0x2a, 0x1d, 0x7f, 0x0b, 0x72, 0xa1, 0x5a, 0xf6, 0xee, 0xdc,
	0xdd, 0xac, 0x0e, 0x65, 0x6b, 0x32, 0x55, 0x25, 0x7e, 0x98, 0xbd, 0x53, 0x4b, 0x26, 0x06, 0x85,
	0xd7, 0x9a, 0x72, 0xbd, 0xd1, 0x09, 0xd4, 0xf2, 0x17, 0x04, 0x1d, 0x7e, 0xfc, 0x51, 0xec, 0x1c,
	0xec, 0xf0, 0xbf, 0x94, 0xcc, 0x05, 0xec, 0x6f, 0xe5, 0x9c, 0x9b, 0xe8, 0xfc, 0x36, 0xeb, 0xd1,
	0x8e, 0xa8, 0xbb, 0x17, 0xab, 0x73, 0xb4, 0xb3, 0x70, 0xb1, 0x7a, 0x2f, 0xa5, 0xc1, 0x8f, 0x7f,
	0xbc, 0xbe, 0xf4, 0x93, 0xbf, 0x52, 0xd7, 0x58, 0xd2, 0x75, 0x9f, 0x07, 0x7c, 0xef, 0xd3, 0x7e,
	0xe4, 0x5e, 0xd2, 0xfe, 0xfd, 0x9f, 0xd2, 0x2f, 0x91, 0x2b, 0x0c, 0xb7, 0xc6, 0x87, 0xf5, 0xf5,
	0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xdc, 0x0e, 0x86, 0x5d, 0xb9, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockStreamClient is the client API for BlockStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockStreamClient interface {
	Blocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (BlockStream_BlocksClient, error)
}

type blockStreamClient struct {
	cc *grpc.ClientConn
}

func NewBlockStreamClient(cc *grpc.ClientConn) BlockStreamClient {
	return &blockStreamClient{cc}
}

func (c *blockStreamClient) Blocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (BlockStream_BlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockStream_serviceDesc.Streams[0], "/dfuse.bstream.v1.BlockStream/Blocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStream_BlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type blockStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *blockStreamBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockStreamServer is the server API for BlockStream service.
type BlockStreamServer interface {
	Blocks(*BlockRequest, BlockStream_BlocksServer) error
}

// UnimplementedBlockStreamServer can be embedded to have forward compatible implementations.
type UnimplementedBlockStreamServer struct {
}

func (*UnimplementedBlockStreamServer) Blocks(req *BlockRequest, srv BlockStream_BlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}

func RegisterBlockStreamServer(s *grpc.Server, srv BlockStreamServer) {
	s.RegisterService(&_BlockStream_serviceDesc, srv)
}

func _BlockStream_Blocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStreamServer).Blocks(m, &blockStreamBlocksServer{stream})
}

type BlockStream_BlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type blockStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *blockStreamBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

var _BlockStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.bstream.v1.BlockStream",
	HandlerType: (*BlockStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Blocks",
			Handler:       _BlockStream_Blocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/bstream/v1/bstream.proto",
}

// BlockStreamV2Client is the client API for BlockStreamV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockStreamV2Client interface {
	Blocks(ctx context.Context, in *BlocksRequestV2, opts ...grpc.CallOption) (BlockStreamV2_BlocksClient, error)
}

type blockStreamV2Client struct {
	cc *grpc.ClientConn
}

func NewBlockStreamV2Client(cc *grpc.ClientConn) BlockStreamV2Client {
	return &blockStreamV2Client{cc}
}

func (c *blockStreamV2Client) Blocks(ctx context.Context, in *BlocksRequestV2, opts ...grpc.CallOption) (BlockStreamV2_BlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockStreamV2_serviceDesc.Streams[0], "/dfuse.bstream.v1.BlockStreamV2/Blocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStreamV2BlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStreamV2_BlocksClient interface {
	Recv() (*BlockResponseV2, error)
	grpc.ClientStream
}

type blockStreamV2BlocksClient struct {
	grpc.ClientStream
}

func (x *blockStreamV2BlocksClient) Recv() (*BlockResponseV2, error) {
	m := new(BlockResponseV2)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockStreamV2Server is the server API for BlockStreamV2 service.
type BlockStreamV2Server interface {
	Blocks(*BlocksRequestV2, BlockStreamV2_BlocksServer) error
}

// UnimplementedBlockStreamV2Server can be embedded to have forward compatible implementations.
type UnimplementedBlockStreamV2Server struct {
}

func (*UnimplementedBlockStreamV2Server) Blocks(req *BlocksRequestV2, srv BlockStreamV2_BlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}

func RegisterBlockStreamV2Server(s *grpc.Server, srv BlockStreamV2Server) {
	s.RegisterService(&_BlockStreamV2_serviceDesc, srv)
}

func _BlockStreamV2_Blocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequestV2)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStreamV2Server).Blocks(m, &blockStreamV2BlocksServer{stream})
}

type BlockStreamV2_BlocksServer interface {
	Send(*BlockResponseV2) error
	grpc.ServerStream
}

type blockStreamV2BlocksServer struct {
	grpc.ServerStream
}

func (x *blockStreamV2BlocksServer) Send(m *BlockResponseV2) error {
	return x.ServerStream.SendMsg(m)
}

var _BlockStreamV2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.bstream.v1.BlockStreamV2",
	HandlerType: (*BlockStreamV2Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Blocks",
			Handler:       _BlockStreamV2_Blocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/bstream/v1/bstream.proto",
}
