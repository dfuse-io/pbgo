// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dfuse/bstream/v1/bstream.proto

package v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Protocol int32

const (
	Protocol_UNKNOWN Protocol = 0
	Protocol_EOS     Protocol = 1
	Protocol_ETH     Protocol = 2
)

var Protocol_name = map[int32]string{
	0: "UNKNOWN",
	1: "EOS",
	2: "ETH",
}

var Protocol_value = map[string]int32{
	"UNKNOWN": 0,
	"EOS":     1,
	"ETH":     2,
}

func (x Protocol) String() string {
	return proto.EnumName(Protocol_name, int32(x))
}

func (Protocol) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{0}
}

// Whether we can assume the data will come ordered, unless there is a chain reorganization.
// mindreaders output ordered data, whereas relayers can output unordered data.
// The server can fail early if the assumption of the caller cannot be fulfilled.
type BlockRequest_Order int32

const (
	BlockRequest_UNSPECIFIED BlockRequest_Order = 0
	BlockRequest_ORDERED     BlockRequest_Order = 1
	BlockRequest_UNORDERED   BlockRequest_Order = 2
)

var BlockRequest_Order_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "ORDERED",
	2: "UNORDERED",
}

var BlockRequest_Order_value = map[string]int32{
	"UNSPECIFIED": 0,
	"ORDERED":     1,
	"UNORDERED":   2,
}

func (x BlockRequest_Order) String() string {
	return proto.EnumName(BlockRequest_Order_name, int32(x))
}

func (BlockRequest_Order) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{0, 0}
}

type BlockRequest struct {
	// Number of blocks we want to get in burst upon connection, on a best effort basis.
	Burst int64 `protobuf:"varint,1,opt,name=burst,proto3" json:"burst,omitempty"`
	// Type of blocks we're after here, is it 'ethereum' data, 'eos', etc.. The server can fail early
	// if he doesn't match the data he serves (services mismatch, etc..)
	ContentType          string             `protobuf:"bytes,2,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Order                BlockRequest_Order `protobuf:"varint,3,opt,name=order,proto3,enum=dfuse.bstream.v1.BlockRequest_Order" json:"order,omitempty"`
	Requester            string             `protobuf:"bytes,4,opt,name=requester,proto3" json:"requester,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *BlockRequest) Reset()         { *m = BlockRequest{} }
func (m *BlockRequest) String() string { return proto.CompactTextString(m) }
func (*BlockRequest) ProtoMessage()    {}
func (*BlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{0}
}

func (m *BlockRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlockRequest.Unmarshal(m, b)
}
func (m *BlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlockRequest.Marshal(b, m, deterministic)
}
func (m *BlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockRequest.Merge(m, src)
}
func (m *BlockRequest) XXX_Size() int {
	return xxx_messageInfo_BlockRequest.Size(m)
}
func (m *BlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BlockRequest proto.InternalMessageInfo

func (m *BlockRequest) GetBurst() int64 {
	if m != nil {
		return m.Burst
	}
	return 0
}

func (m *BlockRequest) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *BlockRequest) GetOrder() BlockRequest_Order {
	if m != nil {
		return m.Order
	}
	return BlockRequest_UNSPECIFIED
}

func (m *BlockRequest) GetRequester() string {
	if m != nil {
		return m.Requester
	}
	return ""
}

type Block struct {
	Number               uint64               `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	Id                   string               `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	PreviousId           string               `protobuf:"bytes,3,opt,name=previous_id,json=previousId,proto3" json:"previous_id,omitempty"`
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LibNum               uint64               `protobuf:"varint,5,opt,name=lib_num,json=libNum,proto3" json:"lib_num,omitempty"`
	PayloadKind          Protocol             `protobuf:"varint,6,opt,name=payload_kind,json=payloadKind,proto3,enum=dfuse.bstream.v1.Protocol" json:"payload_kind,omitempty"`
	PayloadVersion       int32                `protobuf:"varint,7,opt,name=payload_version,json=payloadVersion,proto3" json:"payload_version,omitempty"`
	PayloadBuffer        []byte               `protobuf:"bytes,8,opt,name=payload_buffer,json=payloadBuffer,proto3" json:"payload_buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Block) Reset()         { *m = Block{} }
func (m *Block) String() string { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()    {}
func (*Block) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{1}
}

func (m *Block) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Block.Unmarshal(m, b)
}
func (m *Block) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Block.Marshal(b, m, deterministic)
}
func (m *Block) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Block.Merge(m, src)
}
func (m *Block) XXX_Size() int {
	return xxx_messageInfo_Block.Size(m)
}
func (m *Block) XXX_DiscardUnknown() {
	xxx_messageInfo_Block.DiscardUnknown(m)
}

var xxx_messageInfo_Block proto.InternalMessageInfo

func (m *Block) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Block) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Block) GetPreviousId() string {
	if m != nil {
		return m.PreviousId
	}
	return ""
}

func (m *Block) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetLibNum() uint64 {
	if m != nil {
		return m.LibNum
	}
	return 0
}

func (m *Block) GetPayloadKind() Protocol {
	if m != nil {
		return m.PayloadKind
	}
	return Protocol_UNKNOWN
}

func (m *Block) GetPayloadVersion() int32 {
	if m != nil {
		return m.PayloadVersion
	}
	return 0
}

func (m *Block) GetPayloadBuffer() []byte {
	if m != nil {
		return m.PayloadBuffer
	}
	return nil
}

type TransactionRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionRequest) Reset()         { *m = TransactionRequest{} }
func (m *TransactionRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionRequest) ProtoMessage()    {}
func (*TransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{2}
}

func (m *TransactionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionRequest.Unmarshal(m, b)
}
func (m *TransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionRequest.Marshal(b, m, deterministic)
}
func (m *TransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionRequest.Merge(m, src)
}
func (m *TransactionRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionRequest.Size(m)
}
func (m *TransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionRequest proto.InternalMessageInfo

type Transaction struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PayloadProtocol      Protocol `protobuf:"varint,6,opt,name=payload_protocol,json=payloadProtocol,proto3,enum=dfuse.bstream.v1.Protocol" json:"payload_protocol,omitempty"`
	PayloadBuffer        []byte   `protobuf:"bytes,8,opt,name=payload_buffer,json=payloadBuffer,proto3" json:"payload_buffer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_9cfb17be2e7d1b7d, []int{3}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Transaction) GetPayloadProtocol() Protocol {
	if m != nil {
		return m.PayloadProtocol
	}
	return Protocol_UNKNOWN
}

func (m *Transaction) GetPayloadBuffer() []byte {
	if m != nil {
		return m.PayloadBuffer
	}
	return nil
}

func init() {
	proto.RegisterEnum("dfuse.bstream.v1.Protocol", Protocol_name, Protocol_value)
	proto.RegisterEnum("dfuse.bstream.v1.BlockRequest_Order", BlockRequest_Order_name, BlockRequest_Order_value)
	proto.RegisterType((*BlockRequest)(nil), "dfuse.bstream.v1.BlockRequest")
	proto.RegisterType((*Block)(nil), "dfuse.bstream.v1.Block")
	proto.RegisterType((*TransactionRequest)(nil), "dfuse.bstream.v1.TransactionRequest")
	proto.RegisterType((*Transaction)(nil), "dfuse.bstream.v1.Transaction")
}

func init() { proto.RegisterFile("dfuse/bstream/v1/bstream.proto", fileDescriptor_9cfb17be2e7d1b7d) }

var fileDescriptor_9cfb17be2e7d1b7d = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xe1, 0x6e, 0xd3, 0x30,
	0x10, 0xc7, 0xe7, 0x6c, 0x69, 0xd7, 0x4b, 0xd7, 0x05, 0x6b, 0x62, 0x51, 0x05, 0x5b, 0xa9, 0x40,
	0x74, 0x20, 0x92, 0xad, 0xf0, 0x01, 0x21, 0xf1, 0xa5, 0x6b, 0x10, 0xd5, 0xa4, 0x74, 0x72, 0x5b,
	0x90, 0xf8, 0x52, 0x25, 0x8d, 0x5b, 0xcc, 0x92, 0x38, 0x38, 0x49, 0xa5, 0x3e, 0x03, 0x6f, 0xc3,
	0xcb, 0xf0, 0x3a, 0x68, 0x4e, 0xd2, 0x55, 0x1b, 0x4c, 0xfb, 0xe6, 0xfb, 0xf9, 0x7f, 0xe7, 0xbb,
	0x7f, 0x4e, 0x81, 0x23, 0x7f, 0x9e, 0x25, 0xd4, 0xf2, 0x92, 0x54, 0x50, 0x37, 0xb4, 0x96, 0x67,
	0xe5, 0xd1, 0x8c, 0x05, 0x4f, 0x39, 0xd6, 0xe5, 0xbd, 0x59, 0xc2, 0xe5, 0x59, 0xf3, 0x78, 0xc1,
	0xf9, 0x22, 0xa0, 0x96, 0xbc, 0xf7, 0xb2, 0xb9, 0x95, 0xb2, 0x90, 0x26, 0xa9, 0x1b, 0xc6, 0x79,
	0x4a, 0xfb, 0x0f, 0x82, 0x7a, 0x2f, 0xe0, 0xb3, 0x2b, 0x42, 0x7f, 0x66, 0x34, 0x49, 0xf1, 0x01,
	0xa8, 0x5e, 0x26, 0x92, 0xd4, 0x40, 0x2d, 0xd4, 0xd9, 0x26, 0x79, 0x80, 0x9f, 0x41, 0x7d, 0xc6,
	0xa3, 0x94, 0x46, 0xe9, 0x34, 0x5d, 0xc5, 0xd4, 0x50, 0x5a, 0xa8, 0x53, 0x23, 0x5a, 0xc1, 0xc6,
	0xab, 0x98, 0xe2, 0x0f, 0xa0, 0x72, 0xe1, 0x53, 0x61, 0x6c, 0xb7, 0x50, 0xa7, 0xd1, 0x7d, 0x6e,
	0xde, 0x6e, 0xc6, 0xdc, 0x7c, 0xc7, 0x1c, 0x5e, 0x6b, 0x49, 0x9e, 0x82, 0x9f, 0x40, 0x4d, 0xe4,
	0x9c, 0x0a, 0x63, 0x47, 0xd6, 0xbe, 0x01, 0xed, 0x77, 0xa0, 0x4a, 0x35, 0xde, 0x07, 0x6d, 0xe2,
	0x8c, 0x2e, 0xed, 0xf3, 0xc1, 0xa7, 0x81, 0xdd, 0xd7, 0xb7, 0xb0, 0x06, 0xd5, 0x21, 0xe9, 0xdb,
	0xc4, 0xee, 0xeb, 0x08, 0xef, 0x41, 0x6d, 0xe2, 0x94, 0xa1, 0xd2, 0xfe, 0xad, 0x80, 0x2a, 0x5f,
	0xc4, 0x8f, 0xa1, 0x12, 0x65, 0xa1, 0x47, 0x85, 0x9c, 0x69, 0x87, 0x14, 0x11, 0x6e, 0x80, 0xc2,
	0xfc, 0x62, 0x14, 0x85, 0xf9, 0xf8, 0x18, 0xb4, 0x58, 0xd0, 0x25, 0xe3, 0x59, 0x32, 0x65, 0xbe,
	0x9c, 0xa3, 0x46, 0xa0, 0x44, 0x03, 0x1f, 0xbf, 0x87, 0xda, 0xda, 0x3f, 0xd9, 0xa6, 0xd6, 0x6d,
	0x9a, 0xb9, 0xc3, 0x66, 0xe9, 0xb0, 0x39, 0x2e, 0x15, 0xe4, 0x46, 0x8c, 0x0f, 0xa1, 0x1a, 0x30,
	0x6f, 0x1a, 0x65, 0xa1, 0xa1, 0xe6, 0x3d, 0x04, 0xcc, 0x73, 0xb2, 0x10, 0x7f, 0x84, 0x7a, 0xec,
	0xae, 0x02, 0xee, 0xfa, 0xd3, 0x2b, 0x16, 0xf9, 0x46, 0x45, 0x9a, 0xd7, 0xbc, 0x6b, 0xde, 0xe5,
	0x75, 0xfd, 0x19, 0x0f, 0x88, 0x56, 0xe8, 0x2f, 0x58, 0xe4, 0xe3, 0x97, 0xb0, 0x5f, 0xa6, 0x2f,
	0xa9, 0x48, 0x18, 0x8f, 0x8c, 0x6a, 0x0b, 0x75, 0x54, 0xd2, 0x28, 0xf0, 0x97, 0x9c, 0xe2, 0x17,
	0x50, 0x92, 0xa9, 0x97, 0xcd, 0xe7, 0x54, 0x18, 0xbb, 0x2d, 0xd4, 0xa9, 0x93, 0xbd, 0x82, 0xf6,
	0x24, 0x6c, 0x1f, 0x00, 0x1e, 0x0b, 0x37, 0x4a, 0xdc, 0x59, 0xca, 0x78, 0x54, 0x7c, 0xab, 0xf6,
	0x2f, 0x04, 0xda, 0x06, 0x2e, 0x8c, 0x43, 0x6b, 0xe3, 0x6c, 0xd0, 0xcb, 0xe2, 0x71, 0xd1, 0xe6,
	0x03, 0x06, 0x29, 0x3b, 0x2f, 0xc1, 0x03, 0x7b, 0x7c, 0x75, 0x02, 0xbb, 0xeb, 0x14, 0x0d, 0xaa,
	0x13, 0xe7, 0xc2, 0x19, 0x7e, 0x75, 0xf4, 0x2d, 0x5c, 0x85, 0x6d, 0x7b, 0x38, 0xd2, 0x91, 0x3c,
	0x8c, 0x3f, 0xeb, 0x4a, 0x97, 0x80, 0x26, 0x57, 0x60, 0x24, 0x5f, 0xc7, 0xe7, 0x50, 0x91, 0x61,
	0x82, 0x8f, 0xee, 0xdf, 0xce, 0xe6, 0xe1, 0x7f, 0xee, 0x4f, 0x51, 0xf7, 0x07, 0x3c, 0xda, 0xf0,
	0xa2, 0xa8, 0x3c, 0x81, 0xfa, 0x06, 0x4c, 0xf0, 0x3f, 0xb6, 0xff, 0xae, 0xaf, 0xcd, 0xa7, 0xf7,
	0xaa, 0x4e, 0x51, 0xef, 0xf5, 0xb7, 0x93, 0x05, 0x4b, 0xbf, 0x67, 0x9e, 0x39, 0xe3, 0xa1, 0x25,
	0xc5, 0x6f, 0x18, 0xb7, 0x62, 0x6f, 0xc1, 0xad, 0xdb, 0xff, 0x02, 0xaf, 0x22, 0xbd, 0x7f, 0xfb,
	0x37, 0x00, 0x00, 0xff, 0xff, 0xf7, 0xc7, 0x95, 0x3e, 0x26, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BlockStreamClient is the client API for BlockStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlockStreamClient interface {
	Blocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (BlockStream_BlocksClient, error)
}

type blockStreamClient struct {
	cc *grpc.ClientConn
}

func NewBlockStreamClient(cc *grpc.ClientConn) BlockStreamClient {
	return &blockStreamClient{cc}
}

func (c *blockStreamClient) Blocks(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (BlockStream_BlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BlockStream_serviceDesc.Streams[0], "/dfuse.bstream.v1.BlockStream/Blocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockStreamBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockStream_BlocksClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type blockStreamBlocksClient struct {
	grpc.ClientStream
}

func (x *blockStreamBlocksClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockStreamServer is the server API for BlockStream service.
type BlockStreamServer interface {
	Blocks(*BlockRequest, BlockStream_BlocksServer) error
}

// UnimplementedBlockStreamServer can be embedded to have forward compatible implementations.
type UnimplementedBlockStreamServer struct {
}

func (*UnimplementedBlockStreamServer) Blocks(req *BlockRequest, srv BlockStream_BlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method Blocks not implemented")
}

func RegisterBlockStreamServer(s *grpc.Server, srv BlockStreamServer) {
	s.RegisterService(&_BlockStream_serviceDesc, srv)
}

func _BlockStream_Blocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlockRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockStreamServer).Blocks(m, &blockStreamBlocksServer{stream})
}

type BlockStream_BlocksServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type blockStreamBlocksServer struct {
	grpc.ServerStream
}

func (x *blockStreamBlocksServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

var _BlockStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.bstream.v1.BlockStream",
	HandlerType: (*BlockStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Blocks",
			Handler:       _BlockStream_Blocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/bstream/v1/bstream.proto",
}

// TransactionStreamClient is the client API for TransactionStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionStreamClient interface {
	Transactions(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (TransactionStream_TransactionsClient, error)
}

type transactionStreamClient struct {
	cc *grpc.ClientConn
}

func NewTransactionStreamClient(cc *grpc.ClientConn) TransactionStreamClient {
	return &transactionStreamClient{cc}
}

func (c *transactionStreamClient) Transactions(ctx context.Context, in *TransactionRequest, opts ...grpc.CallOption) (TransactionStream_TransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionStream_serviceDesc.Streams[0], "/dfuse.bstream.v1.TransactionStream/Transactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionStreamTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionStream_TransactionsClient interface {
	Recv() (*Transaction, error)
	grpc.ClientStream
}

type transactionStreamTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionStreamTransactionsClient) Recv() (*Transaction, error) {
	m := new(Transaction)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TransactionStreamServer is the server API for TransactionStream service.
type TransactionStreamServer interface {
	Transactions(*TransactionRequest, TransactionStream_TransactionsServer) error
}

// UnimplementedTransactionStreamServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionStreamServer struct {
}

func (*UnimplementedTransactionStreamServer) Transactions(req *TransactionRequest, srv TransactionStream_TransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method Transactions not implemented")
}

func RegisterTransactionStreamServer(s *grpc.Server, srv TransactionStreamServer) {
	s.RegisterService(&_TransactionStream_serviceDesc, srv)
}

func _TransactionStream_Transactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TransactionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionStreamServer).Transactions(m, &transactionStreamTransactionsServer{stream})
}

type TransactionStream_TransactionsServer interface {
	Send(*Transaction) error
	grpc.ServerStream
}

type transactionStreamTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionStreamTransactionsServer) Send(m *Transaction) error {
	return x.ServerStream.SendMsg(m)
}

var _TransactionStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dfuse.bstream.v1.TransactionStream",
	HandlerType: (*TransactionStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Transactions",
			Handler:       _TransactionStream_Transactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dfuse/bstream/v1/bstream.proto",
}
